/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package emInterfaces;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-10-6")
public class emDataApi {

  /**
   * For efficiency, wave data is stored in a central repository. This means programs do not have to transfer the whole dataset around when working in a distributed fashion.
   * 
   * Wavebuffers are stored in a hashtable, as a {string,emWaveForm} pair.
   * 
   * Client applications need to tidy up the hashtable by deleting waveforms that are no longer used.
   * 
   */
  public interface Iface {

    /**
     * Make a buffer of a certain length, returns its name
     * 
     * @param length The length
     */
    public String createBuffer(long length) throws emException, org.apache.thrift.TException;

    /**
     * Frees the named buffer
     * 
     * @param bufferName The name of the buffer
     */
    public void destroyBuffer(String bufferName) throws emException, org.apache.thrift.TException;

    /**
     * Get the actual raw data
     * 
     * @param bufferName The name of the buffer
     */
    public emWaveForm getBuffer(String bufferName) throws emException, org.apache.thrift.TException;

    /**
     * Creates a buffer from an existing sample
     * 
     * @param samples Existing source
     */
    public String setBuffer(emWaveForm samples) throws emException, org.apache.thrift.TException;

    /**
     * Copies a buffer, returns the copies name
     * 
     * @param bufferName
     */
    public String cloneBuffer(String bufferName) throws emException, org.apache.thrift.TException;

    /**
     * Rename a buffer, can be used to make code human readable
     * 
     * @param oldBufferName The buffer to rename
     * 
     * @param newBufferName The new name
     */
    public void renameBuffer(String oldBufferName, String newBufferName) throws emException, org.apache.thrift.TException;

    /**
     * Rename a buffer
     * 
     * @param bufferName The buffer name
     * 
     * @param fileName Where to save it to
     */
    public void saveBuffer(String bufferName, String fileName) throws emException, org.apache.thrift.TException;

    /**
     * Load a buffer from disc. Returns the name of the new buffer
     * 
     * @param fileName File containing the buffer
     */
    public String loadBuffer(String fileName) throws emException, org.apache.thrift.TException;

    /**
     * Element wise, compute difference of two buffers. Returns name of the output buffer.
     * 
     * @param bufferA
     * @param bufferB
     */
    public String absDifference(String bufferA, String bufferB) throws emException, org.apache.thrift.TException;

    /**
     * Find the sum of the buffer
     * 
     * @param bufferName
     */
    public double sum(String bufferName) throws emException, org.apache.thrift.TException;

    /**
     * Computes the sum squared difference of two buffers
     * 
     * @param bufferA
     * @param bufferB
     */
    public double sumSquaredDifference(String bufferA, String bufferB) throws emException, org.apache.thrift.TException;

    /**
     * Element wise subtraction, e.g. bufferA[n] - bufferB[n]. Returns name of the output buffer.
     * 
     * @param bufferA
     * @param bufferB
     */
    public String subtract(String bufferA, String bufferB) throws emException, org.apache.thrift.TException;

    /**
     * Element wise addition, e.g. bufferA[n] +  bufferB[n]. Returns name of the output buffer.
     * 
     * @param bufferA
     * @param bufferB
     */
    public String add(String bufferA, String bufferB) throws emException, org.apache.thrift.TException;

    /**
     * Set all the values in the buffer to value
     * 
     * @param bufferName Buffer name
     * 
     * @param value New value
     */
    public void setValues(String bufferName, int value) throws emException, org.apache.thrift.TException;

    /**
     * if value<threshold, 0 else maxValue. invert does the opposite. Returns name of new buffer
     * 
     * @param bufferName Buffer name
     * 
     * @param thresholdValue Value to test against
     * 
     * @param maxValue Value to set if condition is met
     * 
     * @param invert Invert response
     */
    public String threshold(String bufferName, int thresholdValue, int maxValue, boolean invert) throws emException, org.apache.thrift.TException;

    /**
     * Normalize the data. Returns name of new buffer
     * 
     * @param bufferName Buffer name
     * 
     * @param minValue Normalize from
     * 
     * @param maxValue Normalize to
     */
    public String normalize(String bufferName, int minValue, int maxValue) throws emException, org.apache.thrift.TException;

    /**
     * Quantize the data to discrete levels. Returns name of new buffer
     * 
     * @param bufferName Buffer name
     * 
     * @param minValue Normalize from
     * 
     * @param maxValue Normalize to
     * 
     * @param levels How many discrete levels to quantize to
     */
    public String quantize(String bufferName, int minValue, int maxValue, int levels) throws emException, org.apache.thrift.TException;

    /**
     * Resize the data buffer. Returns name of new buffer.
     * 
     * @param bufferName Buffer name
     * 
     * @param newLength Number of samples in returned buffer
     */
    public String resample(String bufferName, int newLength) throws emException, org.apache.thrift.TException;

    /**
     * Applies the median filter for noise supression.  Returns name of new buffer.
     * 
     * @param bufferName Buffer name
     * 
     * @param fitlerSize Strength of the filter. Larger number is stronger. Must be >=1
     */
    public String medianFilter(String bufferName, int fitlerSize) throws emException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createBuffer(long length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void destroyBuffer(String bufferName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBuffer(String bufferName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setBuffer(emWaveForm samples, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cloneBuffer(String bufferName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void renameBuffer(String oldBufferName, String newBufferName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveBuffer(String bufferName, String fileName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadBuffer(String fileName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void absDifference(String bufferA, String bufferB, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sum(String bufferName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sumSquaredDifference(String bufferA, String bufferB, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void subtract(String bufferA, String bufferB, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void add(String bufferA, String bufferB, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setValues(String bufferName, int value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void threshold(String bufferName, int thresholdValue, int maxValue, boolean invert, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void normalize(String bufferName, int minValue, int maxValue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void quantize(String bufferName, int minValue, int maxValue, int levels, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resample(String bufferName, int newLength, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void medianFilter(String bufferName, int fitlerSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String createBuffer(long length) throws emException, org.apache.thrift.TException
    {
      send_createBuffer(length);
      return recv_createBuffer();
    }

    public void send_createBuffer(long length) throws org.apache.thrift.TException
    {
      createBuffer_args args = new createBuffer_args();
      args.setLength(length);
      sendBase("createBuffer", args);
    }

    public String recv_createBuffer() throws emException, org.apache.thrift.TException
    {
      createBuffer_result result = new createBuffer_result();
      receiveBase(result, "createBuffer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createBuffer failed: unknown result");
    }

    public void destroyBuffer(String bufferName) throws emException, org.apache.thrift.TException
    {
      send_destroyBuffer(bufferName);
      recv_destroyBuffer();
    }

    public void send_destroyBuffer(String bufferName) throws org.apache.thrift.TException
    {
      destroyBuffer_args args = new destroyBuffer_args();
      args.setBufferName(bufferName);
      sendBase("destroyBuffer", args);
    }

    public void recv_destroyBuffer() throws emException, org.apache.thrift.TException
    {
      destroyBuffer_result result = new destroyBuffer_result();
      receiveBase(result, "destroyBuffer");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public emWaveForm getBuffer(String bufferName) throws emException, org.apache.thrift.TException
    {
      send_getBuffer(bufferName);
      return recv_getBuffer();
    }

    public void send_getBuffer(String bufferName) throws org.apache.thrift.TException
    {
      getBuffer_args args = new getBuffer_args();
      args.setBufferName(bufferName);
      sendBase("getBuffer", args);
    }

    public emWaveForm recv_getBuffer() throws emException, org.apache.thrift.TException
    {
      getBuffer_result result = new getBuffer_result();
      receiveBase(result, "getBuffer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBuffer failed: unknown result");
    }

    public String setBuffer(emWaveForm samples) throws emException, org.apache.thrift.TException
    {
      send_setBuffer(samples);
      return recv_setBuffer();
    }

    public void send_setBuffer(emWaveForm samples) throws org.apache.thrift.TException
    {
      setBuffer_args args = new setBuffer_args();
      args.setSamples(samples);
      sendBase("setBuffer", args);
    }

    public String recv_setBuffer() throws emException, org.apache.thrift.TException
    {
      setBuffer_result result = new setBuffer_result();
      receiveBase(result, "setBuffer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setBuffer failed: unknown result");
    }

    public String cloneBuffer(String bufferName) throws emException, org.apache.thrift.TException
    {
      send_cloneBuffer(bufferName);
      return recv_cloneBuffer();
    }

    public void send_cloneBuffer(String bufferName) throws org.apache.thrift.TException
    {
      cloneBuffer_args args = new cloneBuffer_args();
      args.setBufferName(bufferName);
      sendBase("cloneBuffer", args);
    }

    public String recv_cloneBuffer() throws emException, org.apache.thrift.TException
    {
      cloneBuffer_result result = new cloneBuffer_result();
      receiveBase(result, "cloneBuffer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cloneBuffer failed: unknown result");
    }

    public void renameBuffer(String oldBufferName, String newBufferName) throws emException, org.apache.thrift.TException
    {
      send_renameBuffer(oldBufferName, newBufferName);
      recv_renameBuffer();
    }

    public void send_renameBuffer(String oldBufferName, String newBufferName) throws org.apache.thrift.TException
    {
      renameBuffer_args args = new renameBuffer_args();
      args.setOldBufferName(oldBufferName);
      args.setNewBufferName(newBufferName);
      sendBase("renameBuffer", args);
    }

    public void recv_renameBuffer() throws emException, org.apache.thrift.TException
    {
      renameBuffer_result result = new renameBuffer_result();
      receiveBase(result, "renameBuffer");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void saveBuffer(String bufferName, String fileName) throws emException, org.apache.thrift.TException
    {
      send_saveBuffer(bufferName, fileName);
      recv_saveBuffer();
    }

    public void send_saveBuffer(String bufferName, String fileName) throws org.apache.thrift.TException
    {
      saveBuffer_args args = new saveBuffer_args();
      args.setBufferName(bufferName);
      args.setFileName(fileName);
      sendBase("saveBuffer", args);
    }

    public void recv_saveBuffer() throws emException, org.apache.thrift.TException
    {
      saveBuffer_result result = new saveBuffer_result();
      receiveBase(result, "saveBuffer");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public String loadBuffer(String fileName) throws emException, org.apache.thrift.TException
    {
      send_loadBuffer(fileName);
      return recv_loadBuffer();
    }

    public void send_loadBuffer(String fileName) throws org.apache.thrift.TException
    {
      loadBuffer_args args = new loadBuffer_args();
      args.setFileName(fileName);
      sendBase("loadBuffer", args);
    }

    public String recv_loadBuffer() throws emException, org.apache.thrift.TException
    {
      loadBuffer_result result = new loadBuffer_result();
      receiveBase(result, "loadBuffer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadBuffer failed: unknown result");
    }

    public String absDifference(String bufferA, String bufferB) throws emException, org.apache.thrift.TException
    {
      send_absDifference(bufferA, bufferB);
      return recv_absDifference();
    }

    public void send_absDifference(String bufferA, String bufferB) throws org.apache.thrift.TException
    {
      absDifference_args args = new absDifference_args();
      args.setBufferA(bufferA);
      args.setBufferB(bufferB);
      sendBase("absDifference", args);
    }

    public String recv_absDifference() throws emException, org.apache.thrift.TException
    {
      absDifference_result result = new absDifference_result();
      receiveBase(result, "absDifference");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "absDifference failed: unknown result");
    }

    public double sum(String bufferName) throws emException, org.apache.thrift.TException
    {
      send_sum(bufferName);
      return recv_sum();
    }

    public void send_sum(String bufferName) throws org.apache.thrift.TException
    {
      sum_args args = new sum_args();
      args.setBufferName(bufferName);
      sendBase("sum", args);
    }

    public double recv_sum() throws emException, org.apache.thrift.TException
    {
      sum_result result = new sum_result();
      receiveBase(result, "sum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sum failed: unknown result");
    }

    public double sumSquaredDifference(String bufferA, String bufferB) throws emException, org.apache.thrift.TException
    {
      send_sumSquaredDifference(bufferA, bufferB);
      return recv_sumSquaredDifference();
    }

    public void send_sumSquaredDifference(String bufferA, String bufferB) throws org.apache.thrift.TException
    {
      sumSquaredDifference_args args = new sumSquaredDifference_args();
      args.setBufferA(bufferA);
      args.setBufferB(bufferB);
      sendBase("sumSquaredDifference", args);
    }

    public double recv_sumSquaredDifference() throws emException, org.apache.thrift.TException
    {
      sumSquaredDifference_result result = new sumSquaredDifference_result();
      receiveBase(result, "sumSquaredDifference");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sumSquaredDifference failed: unknown result");
    }

    public String subtract(String bufferA, String bufferB) throws emException, org.apache.thrift.TException
    {
      send_subtract(bufferA, bufferB);
      return recv_subtract();
    }

    public void send_subtract(String bufferA, String bufferB) throws org.apache.thrift.TException
    {
      subtract_args args = new subtract_args();
      args.setBufferA(bufferA);
      args.setBufferB(bufferB);
      sendBase("subtract", args);
    }

    public String recv_subtract() throws emException, org.apache.thrift.TException
    {
      subtract_result result = new subtract_result();
      receiveBase(result, "subtract");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "subtract failed: unknown result");
    }

    public String add(String bufferA, String bufferB) throws emException, org.apache.thrift.TException
    {
      send_add(bufferA, bufferB);
      return recv_add();
    }

    public void send_add(String bufferA, String bufferB) throws org.apache.thrift.TException
    {
      add_args args = new add_args();
      args.setBufferA(bufferA);
      args.setBufferB(bufferB);
      sendBase("add", args);
    }

    public String recv_add() throws emException, org.apache.thrift.TException
    {
      add_result result = new add_result();
      receiveBase(result, "add");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "add failed: unknown result");
    }

    public void setValues(String bufferName, int value) throws emException, org.apache.thrift.TException
    {
      send_setValues(bufferName, value);
      recv_setValues();
    }

    public void send_setValues(String bufferName, int value) throws org.apache.thrift.TException
    {
      setValues_args args = new setValues_args();
      args.setBufferName(bufferName);
      args.setValue(value);
      sendBase("setValues", args);
    }

    public void recv_setValues() throws emException, org.apache.thrift.TException
    {
      setValues_result result = new setValues_result();
      receiveBase(result, "setValues");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public String threshold(String bufferName, int thresholdValue, int maxValue, boolean invert) throws emException, org.apache.thrift.TException
    {
      send_threshold(bufferName, thresholdValue, maxValue, invert);
      return recv_threshold();
    }

    public void send_threshold(String bufferName, int thresholdValue, int maxValue, boolean invert) throws org.apache.thrift.TException
    {
      threshold_args args = new threshold_args();
      args.setBufferName(bufferName);
      args.setThresholdValue(thresholdValue);
      args.setMaxValue(maxValue);
      args.setInvert(invert);
      sendBase("threshold", args);
    }

    public String recv_threshold() throws emException, org.apache.thrift.TException
    {
      threshold_result result = new threshold_result();
      receiveBase(result, "threshold");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "threshold failed: unknown result");
    }

    public String normalize(String bufferName, int minValue, int maxValue) throws emException, org.apache.thrift.TException
    {
      send_normalize(bufferName, minValue, maxValue);
      return recv_normalize();
    }

    public void send_normalize(String bufferName, int minValue, int maxValue) throws org.apache.thrift.TException
    {
      normalize_args args = new normalize_args();
      args.setBufferName(bufferName);
      args.setMinValue(minValue);
      args.setMaxValue(maxValue);
      sendBase("normalize", args);
    }

    public String recv_normalize() throws emException, org.apache.thrift.TException
    {
      normalize_result result = new normalize_result();
      receiveBase(result, "normalize");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "normalize failed: unknown result");
    }

    public String quantize(String bufferName, int minValue, int maxValue, int levels) throws emException, org.apache.thrift.TException
    {
      send_quantize(bufferName, minValue, maxValue, levels);
      return recv_quantize();
    }

    public void send_quantize(String bufferName, int minValue, int maxValue, int levels) throws org.apache.thrift.TException
    {
      quantize_args args = new quantize_args();
      args.setBufferName(bufferName);
      args.setMinValue(minValue);
      args.setMaxValue(maxValue);
      args.setLevels(levels);
      sendBase("quantize", args);
    }

    public String recv_quantize() throws emException, org.apache.thrift.TException
    {
      quantize_result result = new quantize_result();
      receiveBase(result, "quantize");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "quantize failed: unknown result");
    }

    public String resample(String bufferName, int newLength) throws emException, org.apache.thrift.TException
    {
      send_resample(bufferName, newLength);
      return recv_resample();
    }

    public void send_resample(String bufferName, int newLength) throws org.apache.thrift.TException
    {
      resample_args args = new resample_args();
      args.setBufferName(bufferName);
      args.setNewLength(newLength);
      sendBase("resample", args);
    }

    public String recv_resample() throws emException, org.apache.thrift.TException
    {
      resample_result result = new resample_result();
      receiveBase(result, "resample");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resample failed: unknown result");
    }

    public String medianFilter(String bufferName, int fitlerSize) throws emException, org.apache.thrift.TException
    {
      send_medianFilter(bufferName, fitlerSize);
      return recv_medianFilter();
    }

    public void send_medianFilter(String bufferName, int fitlerSize) throws org.apache.thrift.TException
    {
      medianFilter_args args = new medianFilter_args();
      args.setBufferName(bufferName);
      args.setFitlerSize(fitlerSize);
      sendBase("medianFilter", args);
    }

    public String recv_medianFilter() throws emException, org.apache.thrift.TException
    {
      medianFilter_result result = new medianFilter_result();
      receiveBase(result, "medianFilter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "medianFilter failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createBuffer(long length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createBuffer_call method_call = new createBuffer_call(length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createBuffer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long length;
      public createBuffer_call(long length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createBuffer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createBuffer_args args = new createBuffer_args();
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createBuffer();
      }
    }

    public void destroyBuffer(String bufferName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      destroyBuffer_call method_call = new destroyBuffer_call(bufferName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class destroyBuffer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bufferName;
      public destroyBuffer_call(String bufferName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bufferName = bufferName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("destroyBuffer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        destroyBuffer_args args = new destroyBuffer_args();
        args.setBufferName(bufferName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_destroyBuffer();
      }
    }

    public void getBuffer(String bufferName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBuffer_call method_call = new getBuffer_call(bufferName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBuffer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bufferName;
      public getBuffer_call(String bufferName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bufferName = bufferName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBuffer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBuffer_args args = new getBuffer_args();
        args.setBufferName(bufferName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public emWaveForm getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBuffer();
      }
    }

    public void setBuffer(emWaveForm samples, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setBuffer_call method_call = new setBuffer_call(samples, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setBuffer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private emWaveForm samples;
      public setBuffer_call(emWaveForm samples, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.samples = samples;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setBuffer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setBuffer_args args = new setBuffer_args();
        args.setSamples(samples);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setBuffer();
      }
    }

    public void cloneBuffer(String bufferName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cloneBuffer_call method_call = new cloneBuffer_call(bufferName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cloneBuffer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bufferName;
      public cloneBuffer_call(String bufferName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bufferName = bufferName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cloneBuffer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cloneBuffer_args args = new cloneBuffer_args();
        args.setBufferName(bufferName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cloneBuffer();
      }
    }

    public void renameBuffer(String oldBufferName, String newBufferName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      renameBuffer_call method_call = new renameBuffer_call(oldBufferName, newBufferName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class renameBuffer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String oldBufferName;
      private String newBufferName;
      public renameBuffer_call(String oldBufferName, String newBufferName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oldBufferName = oldBufferName;
        this.newBufferName = newBufferName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("renameBuffer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        renameBuffer_args args = new renameBuffer_args();
        args.setOldBufferName(oldBufferName);
        args.setNewBufferName(newBufferName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_renameBuffer();
      }
    }

    public void saveBuffer(String bufferName, String fileName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveBuffer_call method_call = new saveBuffer_call(bufferName, fileName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveBuffer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bufferName;
      private String fileName;
      public saveBuffer_call(String bufferName, String fileName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bufferName = bufferName;
        this.fileName = fileName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveBuffer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveBuffer_args args = new saveBuffer_args();
        args.setBufferName(bufferName);
        args.setFileName(fileName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveBuffer();
      }
    }

    public void loadBuffer(String fileName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadBuffer_call method_call = new loadBuffer_call(fileName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadBuffer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String fileName;
      public loadBuffer_call(String fileName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileName = fileName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadBuffer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadBuffer_args args = new loadBuffer_args();
        args.setFileName(fileName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadBuffer();
      }
    }

    public void absDifference(String bufferA, String bufferB, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      absDifference_call method_call = new absDifference_call(bufferA, bufferB, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class absDifference_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bufferA;
      private String bufferB;
      public absDifference_call(String bufferA, String bufferB, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bufferA = bufferA;
        this.bufferB = bufferB;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("absDifference", org.apache.thrift.protocol.TMessageType.CALL, 0));
        absDifference_args args = new absDifference_args();
        args.setBufferA(bufferA);
        args.setBufferB(bufferB);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_absDifference();
      }
    }

    public void sum(String bufferName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sum_call method_call = new sum_call(bufferName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bufferName;
      public sum_call(String bufferName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bufferName = bufferName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sum_args args = new sum_args();
        args.setBufferName(bufferName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sum();
      }
    }

    public void sumSquaredDifference(String bufferA, String bufferB, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sumSquaredDifference_call method_call = new sumSquaredDifference_call(bufferA, bufferB, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sumSquaredDifference_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bufferA;
      private String bufferB;
      public sumSquaredDifference_call(String bufferA, String bufferB, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bufferA = bufferA;
        this.bufferB = bufferB;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sumSquaredDifference", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sumSquaredDifference_args args = new sumSquaredDifference_args();
        args.setBufferA(bufferA);
        args.setBufferB(bufferB);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sumSquaredDifference();
      }
    }

    public void subtract(String bufferA, String bufferB, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      subtract_call method_call = new subtract_call(bufferA, bufferB, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class subtract_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bufferA;
      private String bufferB;
      public subtract_call(String bufferA, String bufferB, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bufferA = bufferA;
        this.bufferB = bufferB;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("subtract", org.apache.thrift.protocol.TMessageType.CALL, 0));
        subtract_args args = new subtract_args();
        args.setBufferA(bufferA);
        args.setBufferB(bufferB);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_subtract();
      }
    }

    public void add(String bufferA, String bufferB, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      add_call method_call = new add_call(bufferA, bufferB, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class add_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bufferA;
      private String bufferB;
      public add_call(String bufferA, String bufferB, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bufferA = bufferA;
        this.bufferB = bufferB;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add", org.apache.thrift.protocol.TMessageType.CALL, 0));
        add_args args = new add_args();
        args.setBufferA(bufferA);
        args.setBufferB(bufferB);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_add();
      }
    }

    public void setValues(String bufferName, int value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setValues_call method_call = new setValues_call(bufferName, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setValues_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bufferName;
      private int value;
      public setValues_call(String bufferName, int value, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bufferName = bufferName;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setValues", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setValues_args args = new setValues_args();
        args.setBufferName(bufferName);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setValues();
      }
    }

    public void threshold(String bufferName, int thresholdValue, int maxValue, boolean invert, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      threshold_call method_call = new threshold_call(bufferName, thresholdValue, maxValue, invert, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class threshold_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bufferName;
      private int thresholdValue;
      private int maxValue;
      private boolean invert;
      public threshold_call(String bufferName, int thresholdValue, int maxValue, boolean invert, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bufferName = bufferName;
        this.thresholdValue = thresholdValue;
        this.maxValue = maxValue;
        this.invert = invert;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("threshold", org.apache.thrift.protocol.TMessageType.CALL, 0));
        threshold_args args = new threshold_args();
        args.setBufferName(bufferName);
        args.setThresholdValue(thresholdValue);
        args.setMaxValue(maxValue);
        args.setInvert(invert);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_threshold();
      }
    }

    public void normalize(String bufferName, int minValue, int maxValue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      normalize_call method_call = new normalize_call(bufferName, minValue, maxValue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class normalize_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bufferName;
      private int minValue;
      private int maxValue;
      public normalize_call(String bufferName, int minValue, int maxValue, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bufferName = bufferName;
        this.minValue = minValue;
        this.maxValue = maxValue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("normalize", org.apache.thrift.protocol.TMessageType.CALL, 0));
        normalize_args args = new normalize_args();
        args.setBufferName(bufferName);
        args.setMinValue(minValue);
        args.setMaxValue(maxValue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_normalize();
      }
    }

    public void quantize(String bufferName, int minValue, int maxValue, int levels, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      quantize_call method_call = new quantize_call(bufferName, minValue, maxValue, levels, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class quantize_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bufferName;
      private int minValue;
      private int maxValue;
      private int levels;
      public quantize_call(String bufferName, int minValue, int maxValue, int levels, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bufferName = bufferName;
        this.minValue = minValue;
        this.maxValue = maxValue;
        this.levels = levels;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("quantize", org.apache.thrift.protocol.TMessageType.CALL, 0));
        quantize_args args = new quantize_args();
        args.setBufferName(bufferName);
        args.setMinValue(minValue);
        args.setMaxValue(maxValue);
        args.setLevels(levels);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_quantize();
      }
    }

    public void resample(String bufferName, int newLength, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resample_call method_call = new resample_call(bufferName, newLength, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resample_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bufferName;
      private int newLength;
      public resample_call(String bufferName, int newLength, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bufferName = bufferName;
        this.newLength = newLength;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resample", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resample_args args = new resample_args();
        args.setBufferName(bufferName);
        args.setNewLength(newLength);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resample();
      }
    }

    public void medianFilter(String bufferName, int fitlerSize, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      medianFilter_call method_call = new medianFilter_call(bufferName, fitlerSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class medianFilter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bufferName;
      private int fitlerSize;
      public medianFilter_call(String bufferName, int fitlerSize, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bufferName = bufferName;
        this.fitlerSize = fitlerSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("medianFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        medianFilter_args args = new medianFilter_args();
        args.setBufferName(bufferName);
        args.setFitlerSize(fitlerSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws emException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_medianFilter();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createBuffer", new createBuffer());
      processMap.put("destroyBuffer", new destroyBuffer());
      processMap.put("getBuffer", new getBuffer());
      processMap.put("setBuffer", new setBuffer());
      processMap.put("cloneBuffer", new cloneBuffer());
      processMap.put("renameBuffer", new renameBuffer());
      processMap.put("saveBuffer", new saveBuffer());
      processMap.put("loadBuffer", new loadBuffer());
      processMap.put("absDifference", new absDifference());
      processMap.put("sum", new sum());
      processMap.put("sumSquaredDifference", new sumSquaredDifference());
      processMap.put("subtract", new subtract());
      processMap.put("add", new add());
      processMap.put("setValues", new setValues());
      processMap.put("threshold", new threshold());
      processMap.put("normalize", new normalize());
      processMap.put("quantize", new quantize());
      processMap.put("resample", new resample());
      processMap.put("medianFilter", new medianFilter());
      return processMap;
    }

    public static class createBuffer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createBuffer_args> {
      public createBuffer() {
        super("createBuffer");
      }

      public createBuffer_args getEmptyArgsInstance() {
        return new createBuffer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createBuffer_result getResult(I iface, createBuffer_args args) throws org.apache.thrift.TException {
        createBuffer_result result = new createBuffer_result();
        try {
          result.success = iface.createBuffer(args.length);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class destroyBuffer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, destroyBuffer_args> {
      public destroyBuffer() {
        super("destroyBuffer");
      }

      public destroyBuffer_args getEmptyArgsInstance() {
        return new destroyBuffer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public destroyBuffer_result getResult(I iface, destroyBuffer_args args) throws org.apache.thrift.TException {
        destroyBuffer_result result = new destroyBuffer_result();
        try {
          iface.destroyBuffer(args.bufferName);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getBuffer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBuffer_args> {
      public getBuffer() {
        super("getBuffer");
      }

      public getBuffer_args getEmptyArgsInstance() {
        return new getBuffer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBuffer_result getResult(I iface, getBuffer_args args) throws org.apache.thrift.TException {
        getBuffer_result result = new getBuffer_result();
        try {
          result.success = iface.getBuffer(args.bufferName);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class setBuffer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setBuffer_args> {
      public setBuffer() {
        super("setBuffer");
      }

      public setBuffer_args getEmptyArgsInstance() {
        return new setBuffer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setBuffer_result getResult(I iface, setBuffer_args args) throws org.apache.thrift.TException {
        setBuffer_result result = new setBuffer_result();
        try {
          result.success = iface.setBuffer(args.samples);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class cloneBuffer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cloneBuffer_args> {
      public cloneBuffer() {
        super("cloneBuffer");
      }

      public cloneBuffer_args getEmptyArgsInstance() {
        return new cloneBuffer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cloneBuffer_result getResult(I iface, cloneBuffer_args args) throws org.apache.thrift.TException {
        cloneBuffer_result result = new cloneBuffer_result();
        try {
          result.success = iface.cloneBuffer(args.bufferName);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class renameBuffer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, renameBuffer_args> {
      public renameBuffer() {
        super("renameBuffer");
      }

      public renameBuffer_args getEmptyArgsInstance() {
        return new renameBuffer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public renameBuffer_result getResult(I iface, renameBuffer_args args) throws org.apache.thrift.TException {
        renameBuffer_result result = new renameBuffer_result();
        try {
          iface.renameBuffer(args.oldBufferName, args.newBufferName);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class saveBuffer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveBuffer_args> {
      public saveBuffer() {
        super("saveBuffer");
      }

      public saveBuffer_args getEmptyArgsInstance() {
        return new saveBuffer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveBuffer_result getResult(I iface, saveBuffer_args args) throws org.apache.thrift.TException {
        saveBuffer_result result = new saveBuffer_result();
        try {
          iface.saveBuffer(args.bufferName, args.fileName);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class loadBuffer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadBuffer_args> {
      public loadBuffer() {
        super("loadBuffer");
      }

      public loadBuffer_args getEmptyArgsInstance() {
        return new loadBuffer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadBuffer_result getResult(I iface, loadBuffer_args args) throws org.apache.thrift.TException {
        loadBuffer_result result = new loadBuffer_result();
        try {
          result.success = iface.loadBuffer(args.fileName);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class absDifference<I extends Iface> extends org.apache.thrift.ProcessFunction<I, absDifference_args> {
      public absDifference() {
        super("absDifference");
      }

      public absDifference_args getEmptyArgsInstance() {
        return new absDifference_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public absDifference_result getResult(I iface, absDifference_args args) throws org.apache.thrift.TException {
        absDifference_result result = new absDifference_result();
        try {
          result.success = iface.absDifference(args.bufferA, args.bufferB);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class sum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sum_args> {
      public sum() {
        super("sum");
      }

      public sum_args getEmptyArgsInstance() {
        return new sum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sum_result getResult(I iface, sum_args args) throws org.apache.thrift.TException {
        sum_result result = new sum_result();
        try {
          result.success = iface.sum(args.bufferName);
          result.setSuccessIsSet(true);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class sumSquaredDifference<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sumSquaredDifference_args> {
      public sumSquaredDifference() {
        super("sumSquaredDifference");
      }

      public sumSquaredDifference_args getEmptyArgsInstance() {
        return new sumSquaredDifference_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sumSquaredDifference_result getResult(I iface, sumSquaredDifference_args args) throws org.apache.thrift.TException {
        sumSquaredDifference_result result = new sumSquaredDifference_result();
        try {
          result.success = iface.sumSquaredDifference(args.bufferA, args.bufferB);
          result.setSuccessIsSet(true);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class subtract<I extends Iface> extends org.apache.thrift.ProcessFunction<I, subtract_args> {
      public subtract() {
        super("subtract");
      }

      public subtract_args getEmptyArgsInstance() {
        return new subtract_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public subtract_result getResult(I iface, subtract_args args) throws org.apache.thrift.TException {
        subtract_result result = new subtract_result();
        try {
          result.success = iface.subtract(args.bufferA, args.bufferB);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class add<I extends Iface> extends org.apache.thrift.ProcessFunction<I, add_args> {
      public add() {
        super("add");
      }

      public add_args getEmptyArgsInstance() {
        return new add_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public add_result getResult(I iface, add_args args) throws org.apache.thrift.TException {
        add_result result = new add_result();
        try {
          result.success = iface.add(args.bufferA, args.bufferB);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class setValues<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setValues_args> {
      public setValues() {
        super("setValues");
      }

      public setValues_args getEmptyArgsInstance() {
        return new setValues_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setValues_result getResult(I iface, setValues_args args) throws org.apache.thrift.TException {
        setValues_result result = new setValues_result();
        try {
          iface.setValues(args.bufferName, args.value);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class threshold<I extends Iface> extends org.apache.thrift.ProcessFunction<I, threshold_args> {
      public threshold() {
        super("threshold");
      }

      public threshold_args getEmptyArgsInstance() {
        return new threshold_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public threshold_result getResult(I iface, threshold_args args) throws org.apache.thrift.TException {
        threshold_result result = new threshold_result();
        try {
          result.success = iface.threshold(args.bufferName, args.thresholdValue, args.maxValue, args.invert);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class normalize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, normalize_args> {
      public normalize() {
        super("normalize");
      }

      public normalize_args getEmptyArgsInstance() {
        return new normalize_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public normalize_result getResult(I iface, normalize_args args) throws org.apache.thrift.TException {
        normalize_result result = new normalize_result();
        try {
          result.success = iface.normalize(args.bufferName, args.minValue, args.maxValue);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class quantize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, quantize_args> {
      public quantize() {
        super("quantize");
      }

      public quantize_args getEmptyArgsInstance() {
        return new quantize_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public quantize_result getResult(I iface, quantize_args args) throws org.apache.thrift.TException {
        quantize_result result = new quantize_result();
        try {
          result.success = iface.quantize(args.bufferName, args.minValue, args.maxValue, args.levels);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class resample<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resample_args> {
      public resample() {
        super("resample");
      }

      public resample_args getEmptyArgsInstance() {
        return new resample_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resample_result getResult(I iface, resample_args args) throws org.apache.thrift.TException {
        resample_result result = new resample_result();
        try {
          result.success = iface.resample(args.bufferName, args.newLength);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class medianFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, medianFilter_args> {
      public medianFilter() {
        super("medianFilter");
      }

      public medianFilter_args getEmptyArgsInstance() {
        return new medianFilter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public medianFilter_result getResult(I iface, medianFilter_args args) throws org.apache.thrift.TException {
        medianFilter_result result = new medianFilter_result();
        try {
          result.success = iface.medianFilter(args.bufferName, args.fitlerSize);
        } catch (emException err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createBuffer", new createBuffer());
      processMap.put("destroyBuffer", new destroyBuffer());
      processMap.put("getBuffer", new getBuffer());
      processMap.put("setBuffer", new setBuffer());
      processMap.put("cloneBuffer", new cloneBuffer());
      processMap.put("renameBuffer", new renameBuffer());
      processMap.put("saveBuffer", new saveBuffer());
      processMap.put("loadBuffer", new loadBuffer());
      processMap.put("absDifference", new absDifference());
      processMap.put("sum", new sum());
      processMap.put("sumSquaredDifference", new sumSquaredDifference());
      processMap.put("subtract", new subtract());
      processMap.put("add", new add());
      processMap.put("setValues", new setValues());
      processMap.put("threshold", new threshold());
      processMap.put("normalize", new normalize());
      processMap.put("quantize", new quantize());
      processMap.put("resample", new resample());
      processMap.put("medianFilter", new medianFilter());
      return processMap;
    }

    public static class createBuffer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createBuffer_args, String> {
      public createBuffer() {
        super("createBuffer");
      }

      public createBuffer_args getEmptyArgsInstance() {
        return new createBuffer_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            createBuffer_result result = new createBuffer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createBuffer_result result = new createBuffer_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createBuffer_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.createBuffer(args.length,resultHandler);
      }
    }

    public static class destroyBuffer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, destroyBuffer_args, Void> {
      public destroyBuffer() {
        super("destroyBuffer");
      }

      public destroyBuffer_args getEmptyArgsInstance() {
        return new destroyBuffer_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            destroyBuffer_result result = new destroyBuffer_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            destroyBuffer_result result = new destroyBuffer_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, destroyBuffer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.destroyBuffer(args.bufferName,resultHandler);
      }
    }

    public static class getBuffer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBuffer_args, emWaveForm> {
      public getBuffer() {
        super("getBuffer");
      }

      public getBuffer_args getEmptyArgsInstance() {
        return new getBuffer_args();
      }

      public AsyncMethodCallback<emWaveForm> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<emWaveForm>() { 
          public void onComplete(emWaveForm o) {
            getBuffer_result result = new getBuffer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBuffer_result result = new getBuffer_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBuffer_args args, org.apache.thrift.async.AsyncMethodCallback<emWaveForm> resultHandler) throws TException {
        iface.getBuffer(args.bufferName,resultHandler);
      }
    }

    public static class setBuffer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setBuffer_args, String> {
      public setBuffer() {
        super("setBuffer");
      }

      public setBuffer_args getEmptyArgsInstance() {
        return new setBuffer_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            setBuffer_result result = new setBuffer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setBuffer_result result = new setBuffer_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setBuffer_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.setBuffer(args.samples,resultHandler);
      }
    }

    public static class cloneBuffer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cloneBuffer_args, String> {
      public cloneBuffer() {
        super("cloneBuffer");
      }

      public cloneBuffer_args getEmptyArgsInstance() {
        return new cloneBuffer_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            cloneBuffer_result result = new cloneBuffer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cloneBuffer_result result = new cloneBuffer_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cloneBuffer_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.cloneBuffer(args.bufferName,resultHandler);
      }
    }

    public static class renameBuffer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, renameBuffer_args, Void> {
      public renameBuffer() {
        super("renameBuffer");
      }

      public renameBuffer_args getEmptyArgsInstance() {
        return new renameBuffer_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            renameBuffer_result result = new renameBuffer_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            renameBuffer_result result = new renameBuffer_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, renameBuffer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.renameBuffer(args.oldBufferName, args.newBufferName,resultHandler);
      }
    }

    public static class saveBuffer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveBuffer_args, Void> {
      public saveBuffer() {
        super("saveBuffer");
      }

      public saveBuffer_args getEmptyArgsInstance() {
        return new saveBuffer_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveBuffer_result result = new saveBuffer_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveBuffer_result result = new saveBuffer_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveBuffer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.saveBuffer(args.bufferName, args.fileName,resultHandler);
      }
    }

    public static class loadBuffer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadBuffer_args, String> {
      public loadBuffer() {
        super("loadBuffer");
      }

      public loadBuffer_args getEmptyArgsInstance() {
        return new loadBuffer_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadBuffer_result result = new loadBuffer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadBuffer_result result = new loadBuffer_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadBuffer_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadBuffer(args.fileName,resultHandler);
      }
    }

    public static class absDifference<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, absDifference_args, String> {
      public absDifference() {
        super("absDifference");
      }

      public absDifference_args getEmptyArgsInstance() {
        return new absDifference_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            absDifference_result result = new absDifference_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            absDifference_result result = new absDifference_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, absDifference_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.absDifference(args.bufferA, args.bufferB,resultHandler);
      }
    }

    public static class sum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sum_args, Double> {
      public sum() {
        super("sum");
      }

      public sum_args getEmptyArgsInstance() {
        return new sum_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            sum_result result = new sum_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sum_result result = new sum_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sum_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.sum(args.bufferName,resultHandler);
      }
    }

    public static class sumSquaredDifference<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sumSquaredDifference_args, Double> {
      public sumSquaredDifference() {
        super("sumSquaredDifference");
      }

      public sumSquaredDifference_args getEmptyArgsInstance() {
        return new sumSquaredDifference_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            sumSquaredDifference_result result = new sumSquaredDifference_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sumSquaredDifference_result result = new sumSquaredDifference_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sumSquaredDifference_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.sumSquaredDifference(args.bufferA, args.bufferB,resultHandler);
      }
    }

    public static class subtract<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, subtract_args, String> {
      public subtract() {
        super("subtract");
      }

      public subtract_args getEmptyArgsInstance() {
        return new subtract_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            subtract_result result = new subtract_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            subtract_result result = new subtract_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, subtract_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.subtract(args.bufferA, args.bufferB,resultHandler);
      }
    }

    public static class add<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, add_args, String> {
      public add() {
        super("add");
      }

      public add_args getEmptyArgsInstance() {
        return new add_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            add_result result = new add_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            add_result result = new add_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, add_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.add(args.bufferA, args.bufferB,resultHandler);
      }
    }

    public static class setValues<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setValues_args, Void> {
      public setValues() {
        super("setValues");
      }

      public setValues_args getEmptyArgsInstance() {
        return new setValues_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setValues_result result = new setValues_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setValues_result result = new setValues_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setValues_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setValues(args.bufferName, args.value,resultHandler);
      }
    }

    public static class threshold<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, threshold_args, String> {
      public threshold() {
        super("threshold");
      }

      public threshold_args getEmptyArgsInstance() {
        return new threshold_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            threshold_result result = new threshold_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            threshold_result result = new threshold_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, threshold_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.threshold(args.bufferName, args.thresholdValue, args.maxValue, args.invert,resultHandler);
      }
    }

    public static class normalize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, normalize_args, String> {
      public normalize() {
        super("normalize");
      }

      public normalize_args getEmptyArgsInstance() {
        return new normalize_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            normalize_result result = new normalize_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            normalize_result result = new normalize_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, normalize_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.normalize(args.bufferName, args.minValue, args.maxValue,resultHandler);
      }
    }

    public static class quantize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, quantize_args, String> {
      public quantize() {
        super("quantize");
      }

      public quantize_args getEmptyArgsInstance() {
        return new quantize_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            quantize_result result = new quantize_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            quantize_result result = new quantize_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, quantize_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.quantize(args.bufferName, args.minValue, args.maxValue, args.levels,resultHandler);
      }
    }

    public static class resample<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resample_args, String> {
      public resample() {
        super("resample");
      }

      public resample_args getEmptyArgsInstance() {
        return new resample_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            resample_result result = new resample_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resample_result result = new resample_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resample_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.resample(args.bufferName, args.newLength,resultHandler);
      }
    }

    public static class medianFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, medianFilter_args, String> {
      public medianFilter() {
        super("medianFilter");
      }

      public medianFilter_args getEmptyArgsInstance() {
        return new medianFilter_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            medianFilter_result result = new medianFilter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            medianFilter_result result = new medianFilter_result();
            if (e instanceof emException) {
                        result.err = (emException) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, medianFilter_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.medianFilter(args.bufferName, args.fitlerSize,resultHandler);
      }
    }

  }

  public static class createBuffer_args implements org.apache.thrift.TBase<createBuffer_args, createBuffer_args._Fields>, java.io.Serializable, Cloneable, Comparable<createBuffer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createBuffer_args");

    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createBuffer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createBuffer_argsTupleSchemeFactory());
    }

    /**
     * The length
     */
    public long length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * The length
       */
      LENGTH((short)1, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LENGTH_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBuffer_args.class, metaDataMap);
    }

    public createBuffer_args() {
    }

    public createBuffer_args(
      long length)
    {
      this();
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createBuffer_args(createBuffer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.length = other.length;
    }

    public createBuffer_args deepCopy() {
      return new createBuffer_args(this);
    }

    @Override
    public void clear() {
      setLengthIsSet(false);
      this.length = 0;
    }

    /**
     * The length
     */
    public long getLength() {
      return this.length;
    }

    /**
     * The length
     */
    public createBuffer_args setLength(long length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LENGTH:
        return Long.valueOf(getLength());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LENGTH:
        return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createBuffer_args)
        return this.equals((createBuffer_args)that);
      return false;
    }

    public boolean equals(createBuffer_args that) {
      if (that == null)
        return false;

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_length = true;
      list.add(present_length);
      if (present_length)
        list.add(length);

      return list.hashCode();
    }

    @Override
    public int compareTo(createBuffer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createBuffer_args(");
      boolean first = true;

      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createBuffer_argsStandardSchemeFactory implements SchemeFactory {
      public createBuffer_argsStandardScheme getScheme() {
        return new createBuffer_argsStandardScheme();
      }
    }

    private static class createBuffer_argsStandardScheme extends StandardScheme<createBuffer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createBuffer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.length = iprot.readI64();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createBuffer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI64(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createBuffer_argsTupleSchemeFactory implements SchemeFactory {
      public createBuffer_argsTupleScheme getScheme() {
        return new createBuffer_argsTupleScheme();
      }
    }

    private static class createBuffer_argsTupleScheme extends TupleScheme<createBuffer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLength()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLength()) {
          oprot.writeI64(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.length = iprot.readI64();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class createBuffer_result implements org.apache.thrift.TBase<createBuffer_result, createBuffer_result._Fields>, java.io.Serializable, Cloneable, Comparable<createBuffer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createBuffer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createBuffer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createBuffer_resultTupleSchemeFactory());
    }

    public String success; // required
    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBuffer_result.class, metaDataMap);
    }

    public createBuffer_result() {
    }

    public createBuffer_result(
      String success,
      emException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createBuffer_result(createBuffer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public createBuffer_result deepCopy() {
      return new createBuffer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createBuffer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public emException getErr() {
      return this.err;
    }

    public createBuffer_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createBuffer_result)
        return this.equals((createBuffer_result)that);
      return false;
    }

    public boolean equals(createBuffer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(createBuffer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createBuffer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createBuffer_resultStandardSchemeFactory implements SchemeFactory {
      public createBuffer_resultStandardScheme getScheme() {
        return new createBuffer_resultStandardScheme();
      }
    }

    private static class createBuffer_resultStandardScheme extends StandardScheme<createBuffer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createBuffer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createBuffer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createBuffer_resultTupleSchemeFactory implements SchemeFactory {
      public createBuffer_resultTupleScheme getScheme() {
        return new createBuffer_resultTupleScheme();
      }
    }

    private static class createBuffer_resultTupleScheme extends TupleScheme<createBuffer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class destroyBuffer_args implements org.apache.thrift.TBase<destroyBuffer_args, destroyBuffer_args._Fields>, java.io.Serializable, Cloneable, Comparable<destroyBuffer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("destroyBuffer_args");

    private static final org.apache.thrift.protocol.TField BUFFER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new destroyBuffer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new destroyBuffer_argsTupleSchemeFactory());
    }

    /**
     * The name of the buffer
     */
    public String bufferName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * The name of the buffer
       */
      BUFFER_NAME((short)1, "bufferName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUFFER_NAME
            return BUFFER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUFFER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bufferName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(destroyBuffer_args.class, metaDataMap);
    }

    public destroyBuffer_args() {
    }

    public destroyBuffer_args(
      String bufferName)
    {
      this();
      this.bufferName = bufferName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public destroyBuffer_args(destroyBuffer_args other) {
      if (other.isSetBufferName()) {
        this.bufferName = other.bufferName;
      }
    }

    public destroyBuffer_args deepCopy() {
      return new destroyBuffer_args(this);
    }

    @Override
    public void clear() {
      this.bufferName = null;
    }

    /**
     * The name of the buffer
     */
    public String getBufferName() {
      return this.bufferName;
    }

    /**
     * The name of the buffer
     */
    public destroyBuffer_args setBufferName(String bufferName) {
      this.bufferName = bufferName;
      return this;
    }

    public void unsetBufferName() {
      this.bufferName = null;
    }

    /** Returns true if field bufferName is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferName() {
      return this.bufferName != null;
    }

    public void setBufferNameIsSet(boolean value) {
      if (!value) {
        this.bufferName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUFFER_NAME:
        if (value == null) {
          unsetBufferName();
        } else {
          setBufferName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUFFER_NAME:
        return getBufferName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUFFER_NAME:
        return isSetBufferName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof destroyBuffer_args)
        return this.equals((destroyBuffer_args)that);
      return false;
    }

    public boolean equals(destroyBuffer_args that) {
      if (that == null)
        return false;

      boolean this_present_bufferName = true && this.isSetBufferName();
      boolean that_present_bufferName = true && that.isSetBufferName();
      if (this_present_bufferName || that_present_bufferName) {
        if (!(this_present_bufferName && that_present_bufferName))
          return false;
        if (!this.bufferName.equals(that.bufferName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bufferName = true && (isSetBufferName());
      list.add(present_bufferName);
      if (present_bufferName)
        list.add(bufferName);

      return list.hashCode();
    }

    @Override
    public int compareTo(destroyBuffer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBufferName()).compareTo(other.isSetBufferName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferName, other.bufferName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("destroyBuffer_args(");
      boolean first = true;

      sb.append("bufferName:");
      if (this.bufferName == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class destroyBuffer_argsStandardSchemeFactory implements SchemeFactory {
      public destroyBuffer_argsStandardScheme getScheme() {
        return new destroyBuffer_argsStandardScheme();
      }
    }

    private static class destroyBuffer_argsStandardScheme extends StandardScheme<destroyBuffer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, destroyBuffer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFFER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferName = iprot.readString();
                struct.setBufferNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, destroyBuffer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bufferName != null) {
          oprot.writeFieldBegin(BUFFER_NAME_FIELD_DESC);
          oprot.writeString(struct.bufferName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class destroyBuffer_argsTupleSchemeFactory implements SchemeFactory {
      public destroyBuffer_argsTupleScheme getScheme() {
        return new destroyBuffer_argsTupleScheme();
      }
    }

    private static class destroyBuffer_argsTupleScheme extends TupleScheme<destroyBuffer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, destroyBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBufferName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBufferName()) {
          oprot.writeString(struct.bufferName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, destroyBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bufferName = iprot.readString();
          struct.setBufferNameIsSet(true);
        }
      }
    }

  }

  public static class destroyBuffer_result implements org.apache.thrift.TBase<destroyBuffer_result, destroyBuffer_result._Fields>, java.io.Serializable, Cloneable, Comparable<destroyBuffer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("destroyBuffer_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new destroyBuffer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new destroyBuffer_resultTupleSchemeFactory());
    }

    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(destroyBuffer_result.class, metaDataMap);
    }

    public destroyBuffer_result() {
    }

    public destroyBuffer_result(
      emException err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public destroyBuffer_result(destroyBuffer_result other) {
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public destroyBuffer_result deepCopy() {
      return new destroyBuffer_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public emException getErr() {
      return this.err;
    }

    public destroyBuffer_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof destroyBuffer_result)
        return this.equals((destroyBuffer_result)that);
      return false;
    }

    public boolean equals(destroyBuffer_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(destroyBuffer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("destroyBuffer_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class destroyBuffer_resultStandardSchemeFactory implements SchemeFactory {
      public destroyBuffer_resultStandardScheme getScheme() {
        return new destroyBuffer_resultStandardScheme();
      }
    }

    private static class destroyBuffer_resultStandardScheme extends StandardScheme<destroyBuffer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, destroyBuffer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, destroyBuffer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class destroyBuffer_resultTupleSchemeFactory implements SchemeFactory {
      public destroyBuffer_resultTupleScheme getScheme() {
        return new destroyBuffer_resultTupleScheme();
      }
    }

    private static class destroyBuffer_resultTupleScheme extends TupleScheme<destroyBuffer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, destroyBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, destroyBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class getBuffer_args implements org.apache.thrift.TBase<getBuffer_args, getBuffer_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBuffer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBuffer_args");

    private static final org.apache.thrift.protocol.TField BUFFER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBuffer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBuffer_argsTupleSchemeFactory());
    }

    /**
     * The name of the buffer
     */
    public String bufferName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * The name of the buffer
       */
      BUFFER_NAME((short)1, "bufferName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUFFER_NAME
            return BUFFER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUFFER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bufferName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBuffer_args.class, metaDataMap);
    }

    public getBuffer_args() {
    }

    public getBuffer_args(
      String bufferName)
    {
      this();
      this.bufferName = bufferName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuffer_args(getBuffer_args other) {
      if (other.isSetBufferName()) {
        this.bufferName = other.bufferName;
      }
    }

    public getBuffer_args deepCopy() {
      return new getBuffer_args(this);
    }

    @Override
    public void clear() {
      this.bufferName = null;
    }

    /**
     * The name of the buffer
     */
    public String getBufferName() {
      return this.bufferName;
    }

    /**
     * The name of the buffer
     */
    public getBuffer_args setBufferName(String bufferName) {
      this.bufferName = bufferName;
      return this;
    }

    public void unsetBufferName() {
      this.bufferName = null;
    }

    /** Returns true if field bufferName is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferName() {
      return this.bufferName != null;
    }

    public void setBufferNameIsSet(boolean value) {
      if (!value) {
        this.bufferName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUFFER_NAME:
        if (value == null) {
          unsetBufferName();
        } else {
          setBufferName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUFFER_NAME:
        return getBufferName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUFFER_NAME:
        return isSetBufferName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuffer_args)
        return this.equals((getBuffer_args)that);
      return false;
    }

    public boolean equals(getBuffer_args that) {
      if (that == null)
        return false;

      boolean this_present_bufferName = true && this.isSetBufferName();
      boolean that_present_bufferName = true && that.isSetBufferName();
      if (this_present_bufferName || that_present_bufferName) {
        if (!(this_present_bufferName && that_present_bufferName))
          return false;
        if (!this.bufferName.equals(that.bufferName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bufferName = true && (isSetBufferName());
      list.add(present_bufferName);
      if (present_bufferName)
        list.add(bufferName);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBuffer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBufferName()).compareTo(other.isSetBufferName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferName, other.bufferName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBuffer_args(");
      boolean first = true;

      sb.append("bufferName:");
      if (this.bufferName == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBuffer_argsStandardSchemeFactory implements SchemeFactory {
      public getBuffer_argsStandardScheme getScheme() {
        return new getBuffer_argsStandardScheme();
      }
    }

    private static class getBuffer_argsStandardScheme extends StandardScheme<getBuffer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBuffer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFFER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferName = iprot.readString();
                struct.setBufferNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBuffer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bufferName != null) {
          oprot.writeFieldBegin(BUFFER_NAME_FIELD_DESC);
          oprot.writeString(struct.bufferName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBuffer_argsTupleSchemeFactory implements SchemeFactory {
      public getBuffer_argsTupleScheme getScheme() {
        return new getBuffer_argsTupleScheme();
      }
    }

    private static class getBuffer_argsTupleScheme extends TupleScheme<getBuffer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBufferName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBufferName()) {
          oprot.writeString(struct.bufferName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bufferName = iprot.readString();
          struct.setBufferNameIsSet(true);
        }
      }
    }

  }

  public static class getBuffer_result implements org.apache.thrift.TBase<getBuffer_result, getBuffer_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBuffer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBuffer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBuffer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBuffer_resultTupleSchemeFactory());
    }

    public emWaveForm success; // required
    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, emWaveForm.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBuffer_result.class, metaDataMap);
    }

    public getBuffer_result() {
    }

    public getBuffer_result(
      emWaveForm success,
      emException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuffer_result(getBuffer_result other) {
      if (other.isSetSuccess()) {
        this.success = new emWaveForm(other.success);
      }
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public getBuffer_result deepCopy() {
      return new getBuffer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public emWaveForm getSuccess() {
      return this.success;
    }

    public getBuffer_result setSuccess(emWaveForm success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public emException getErr() {
      return this.err;
    }

    public getBuffer_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((emWaveForm)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuffer_result)
        return this.equals((getBuffer_result)that);
      return false;
    }

    public boolean equals(getBuffer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBuffer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBuffer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBuffer_resultStandardSchemeFactory implements SchemeFactory {
      public getBuffer_resultStandardScheme getScheme() {
        return new getBuffer_resultStandardScheme();
      }
    }

    private static class getBuffer_resultStandardScheme extends StandardScheme<getBuffer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBuffer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new emWaveForm();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBuffer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBuffer_resultTupleSchemeFactory implements SchemeFactory {
      public getBuffer_resultTupleScheme getScheme() {
        return new getBuffer_resultTupleScheme();
      }
    }

    private static class getBuffer_resultTupleScheme extends TupleScheme<getBuffer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new emWaveForm();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class setBuffer_args implements org.apache.thrift.TBase<setBuffer_args, setBuffer_args._Fields>, java.io.Serializable, Cloneable, Comparable<setBuffer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setBuffer_args");

    private static final org.apache.thrift.protocol.TField SAMPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("samples", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setBuffer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setBuffer_argsTupleSchemeFactory());
    }

    /**
     * Existing source
     */
    public emWaveForm samples; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Existing source
       */
      SAMPLES((short)1, "samples");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SAMPLES
            return SAMPLES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SAMPLES, new org.apache.thrift.meta_data.FieldMetaData("samples", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, emWaveForm.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBuffer_args.class, metaDataMap);
    }

    public setBuffer_args() {
    }

    public setBuffer_args(
      emWaveForm samples)
    {
      this();
      this.samples = samples;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBuffer_args(setBuffer_args other) {
      if (other.isSetSamples()) {
        this.samples = new emWaveForm(other.samples);
      }
    }

    public setBuffer_args deepCopy() {
      return new setBuffer_args(this);
    }

    @Override
    public void clear() {
      this.samples = null;
    }

    /**
     * Existing source
     */
    public emWaveForm getSamples() {
      return this.samples;
    }

    /**
     * Existing source
     */
    public setBuffer_args setSamples(emWaveForm samples) {
      this.samples = samples;
      return this;
    }

    public void unsetSamples() {
      this.samples = null;
    }

    /** Returns true if field samples is set (has been assigned a value) and false otherwise */
    public boolean isSetSamples() {
      return this.samples != null;
    }

    public void setSamplesIsSet(boolean value) {
      if (!value) {
        this.samples = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SAMPLES:
        if (value == null) {
          unsetSamples();
        } else {
          setSamples((emWaveForm)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SAMPLES:
        return getSamples();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SAMPLES:
        return isSetSamples();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBuffer_args)
        return this.equals((setBuffer_args)that);
      return false;
    }

    public boolean equals(setBuffer_args that) {
      if (that == null)
        return false;

      boolean this_present_samples = true && this.isSetSamples();
      boolean that_present_samples = true && that.isSetSamples();
      if (this_present_samples || that_present_samples) {
        if (!(this_present_samples && that_present_samples))
          return false;
        if (!this.samples.equals(that.samples))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_samples = true && (isSetSamples());
      list.add(present_samples);
      if (present_samples)
        list.add(samples);

      return list.hashCode();
    }

    @Override
    public int compareTo(setBuffer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSamples()).compareTo(other.isSetSamples());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSamples()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.samples, other.samples);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setBuffer_args(");
      boolean first = true;

      sb.append("samples:");
      if (this.samples == null) {
        sb.append("null");
      } else {
        sb.append(this.samples);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (samples != null) {
        samples.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setBuffer_argsStandardSchemeFactory implements SchemeFactory {
      public setBuffer_argsStandardScheme getScheme() {
        return new setBuffer_argsStandardScheme();
      }
    }

    private static class setBuffer_argsStandardScheme extends StandardScheme<setBuffer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setBuffer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SAMPLES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.samples = new emWaveForm();
                struct.samples.read(iprot);
                struct.setSamplesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setBuffer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.samples != null) {
          oprot.writeFieldBegin(SAMPLES_FIELD_DESC);
          struct.samples.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setBuffer_argsTupleSchemeFactory implements SchemeFactory {
      public setBuffer_argsTupleScheme getScheme() {
        return new setBuffer_argsTupleScheme();
      }
    }

    private static class setBuffer_argsTupleScheme extends TupleScheme<setBuffer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSamples()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSamples()) {
          struct.samples.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.samples = new emWaveForm();
          struct.samples.read(iprot);
          struct.setSamplesIsSet(true);
        }
      }
    }

  }

  public static class setBuffer_result implements org.apache.thrift.TBase<setBuffer_result, setBuffer_result._Fields>, java.io.Serializable, Cloneable, Comparable<setBuffer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setBuffer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setBuffer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setBuffer_resultTupleSchemeFactory());
    }

    public String success; // required
    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBuffer_result.class, metaDataMap);
    }

    public setBuffer_result() {
    }

    public setBuffer_result(
      String success,
      emException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBuffer_result(setBuffer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public setBuffer_result deepCopy() {
      return new setBuffer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public setBuffer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public emException getErr() {
      return this.err;
    }

    public setBuffer_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBuffer_result)
        return this.equals((setBuffer_result)that);
      return false;
    }

    public boolean equals(setBuffer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(setBuffer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setBuffer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setBuffer_resultStandardSchemeFactory implements SchemeFactory {
      public setBuffer_resultStandardScheme getScheme() {
        return new setBuffer_resultStandardScheme();
      }
    }

    private static class setBuffer_resultStandardScheme extends StandardScheme<setBuffer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setBuffer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setBuffer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setBuffer_resultTupleSchemeFactory implements SchemeFactory {
      public setBuffer_resultTupleScheme getScheme() {
        return new setBuffer_resultTupleScheme();
      }
    }

    private static class setBuffer_resultTupleScheme extends TupleScheme<setBuffer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class cloneBuffer_args implements org.apache.thrift.TBase<cloneBuffer_args, cloneBuffer_args._Fields>, java.io.Serializable, Cloneable, Comparable<cloneBuffer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneBuffer_args");

    private static final org.apache.thrift.protocol.TField BUFFER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneBuffer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cloneBuffer_argsTupleSchemeFactory());
    }

    public String bufferName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUFFER_NAME((short)1, "bufferName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUFFER_NAME
            return BUFFER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUFFER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bufferName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneBuffer_args.class, metaDataMap);
    }

    public cloneBuffer_args() {
    }

    public cloneBuffer_args(
      String bufferName)
    {
      this();
      this.bufferName = bufferName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneBuffer_args(cloneBuffer_args other) {
      if (other.isSetBufferName()) {
        this.bufferName = other.bufferName;
      }
    }

    public cloneBuffer_args deepCopy() {
      return new cloneBuffer_args(this);
    }

    @Override
    public void clear() {
      this.bufferName = null;
    }

    public String getBufferName() {
      return this.bufferName;
    }

    public cloneBuffer_args setBufferName(String bufferName) {
      this.bufferName = bufferName;
      return this;
    }

    public void unsetBufferName() {
      this.bufferName = null;
    }

    /** Returns true if field bufferName is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferName() {
      return this.bufferName != null;
    }

    public void setBufferNameIsSet(boolean value) {
      if (!value) {
        this.bufferName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUFFER_NAME:
        if (value == null) {
          unsetBufferName();
        } else {
          setBufferName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUFFER_NAME:
        return getBufferName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUFFER_NAME:
        return isSetBufferName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneBuffer_args)
        return this.equals((cloneBuffer_args)that);
      return false;
    }

    public boolean equals(cloneBuffer_args that) {
      if (that == null)
        return false;

      boolean this_present_bufferName = true && this.isSetBufferName();
      boolean that_present_bufferName = true && that.isSetBufferName();
      if (this_present_bufferName || that_present_bufferName) {
        if (!(this_present_bufferName && that_present_bufferName))
          return false;
        if (!this.bufferName.equals(that.bufferName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bufferName = true && (isSetBufferName());
      list.add(present_bufferName);
      if (present_bufferName)
        list.add(bufferName);

      return list.hashCode();
    }

    @Override
    public int compareTo(cloneBuffer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBufferName()).compareTo(other.isSetBufferName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferName, other.bufferName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneBuffer_args(");
      boolean first = true;

      sb.append("bufferName:");
      if (this.bufferName == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneBuffer_argsStandardSchemeFactory implements SchemeFactory {
      public cloneBuffer_argsStandardScheme getScheme() {
        return new cloneBuffer_argsStandardScheme();
      }
    }

    private static class cloneBuffer_argsStandardScheme extends StandardScheme<cloneBuffer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneBuffer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFFER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferName = iprot.readString();
                struct.setBufferNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneBuffer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bufferName != null) {
          oprot.writeFieldBegin(BUFFER_NAME_FIELD_DESC);
          oprot.writeString(struct.bufferName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cloneBuffer_argsTupleSchemeFactory implements SchemeFactory {
      public cloneBuffer_argsTupleScheme getScheme() {
        return new cloneBuffer_argsTupleScheme();
      }
    }

    private static class cloneBuffer_argsTupleScheme extends TupleScheme<cloneBuffer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cloneBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBufferName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBufferName()) {
          oprot.writeString(struct.bufferName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cloneBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bufferName = iprot.readString();
          struct.setBufferNameIsSet(true);
        }
      }
    }

  }

  public static class cloneBuffer_result implements org.apache.thrift.TBase<cloneBuffer_result, cloneBuffer_result._Fields>, java.io.Serializable, Cloneable, Comparable<cloneBuffer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneBuffer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneBuffer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cloneBuffer_resultTupleSchemeFactory());
    }

    public String success; // required
    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneBuffer_result.class, metaDataMap);
    }

    public cloneBuffer_result() {
    }

    public cloneBuffer_result(
      String success,
      emException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneBuffer_result(cloneBuffer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public cloneBuffer_result deepCopy() {
      return new cloneBuffer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public cloneBuffer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public emException getErr() {
      return this.err;
    }

    public cloneBuffer_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneBuffer_result)
        return this.equals((cloneBuffer_result)that);
      return false;
    }

    public boolean equals(cloneBuffer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(cloneBuffer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneBuffer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneBuffer_resultStandardSchemeFactory implements SchemeFactory {
      public cloneBuffer_resultStandardScheme getScheme() {
        return new cloneBuffer_resultStandardScheme();
      }
    }

    private static class cloneBuffer_resultStandardScheme extends StandardScheme<cloneBuffer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneBuffer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneBuffer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cloneBuffer_resultTupleSchemeFactory implements SchemeFactory {
      public cloneBuffer_resultTupleScheme getScheme() {
        return new cloneBuffer_resultTupleScheme();
      }
    }

    private static class cloneBuffer_resultTupleScheme extends TupleScheme<cloneBuffer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cloneBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cloneBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class renameBuffer_args implements org.apache.thrift.TBase<renameBuffer_args, renameBuffer_args._Fields>, java.io.Serializable, Cloneable, Comparable<renameBuffer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameBuffer_args");

    private static final org.apache.thrift.protocol.TField OLD_BUFFER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("oldBufferName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_BUFFER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("newBufferName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new renameBuffer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new renameBuffer_argsTupleSchemeFactory());
    }

    /**
     * The buffer to rename
     */
    public String oldBufferName; // required
    /**
     * The new name
     */
    public String newBufferName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * The buffer to rename
       */
      OLD_BUFFER_NAME((short)1, "oldBufferName"),
      /**
       * The new name
       */
      NEW_BUFFER_NAME((short)2, "newBufferName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OLD_BUFFER_NAME
            return OLD_BUFFER_NAME;
          case 2: // NEW_BUFFER_NAME
            return NEW_BUFFER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OLD_BUFFER_NAME, new org.apache.thrift.meta_data.FieldMetaData("oldBufferName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_BUFFER_NAME, new org.apache.thrift.meta_data.FieldMetaData("newBufferName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameBuffer_args.class, metaDataMap);
    }

    public renameBuffer_args() {
    }

    public renameBuffer_args(
      String oldBufferName,
      String newBufferName)
    {
      this();
      this.oldBufferName = oldBufferName;
      this.newBufferName = newBufferName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameBuffer_args(renameBuffer_args other) {
      if (other.isSetOldBufferName()) {
        this.oldBufferName = other.oldBufferName;
      }
      if (other.isSetNewBufferName()) {
        this.newBufferName = other.newBufferName;
      }
    }

    public renameBuffer_args deepCopy() {
      return new renameBuffer_args(this);
    }

    @Override
    public void clear() {
      this.oldBufferName = null;
      this.newBufferName = null;
    }

    /**
     * The buffer to rename
     */
    public String getOldBufferName() {
      return this.oldBufferName;
    }

    /**
     * The buffer to rename
     */
    public renameBuffer_args setOldBufferName(String oldBufferName) {
      this.oldBufferName = oldBufferName;
      return this;
    }

    public void unsetOldBufferName() {
      this.oldBufferName = null;
    }

    /** Returns true if field oldBufferName is set (has been assigned a value) and false otherwise */
    public boolean isSetOldBufferName() {
      return this.oldBufferName != null;
    }

    public void setOldBufferNameIsSet(boolean value) {
      if (!value) {
        this.oldBufferName = null;
      }
    }

    /**
     * The new name
     */
    public String getNewBufferName() {
      return this.newBufferName;
    }

    /**
     * The new name
     */
    public renameBuffer_args setNewBufferName(String newBufferName) {
      this.newBufferName = newBufferName;
      return this;
    }

    public void unsetNewBufferName() {
      this.newBufferName = null;
    }

    /** Returns true if field newBufferName is set (has been assigned a value) and false otherwise */
    public boolean isSetNewBufferName() {
      return this.newBufferName != null;
    }

    public void setNewBufferNameIsSet(boolean value) {
      if (!value) {
        this.newBufferName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OLD_BUFFER_NAME:
        if (value == null) {
          unsetOldBufferName();
        } else {
          setOldBufferName((String)value);
        }
        break;

      case NEW_BUFFER_NAME:
        if (value == null) {
          unsetNewBufferName();
        } else {
          setNewBufferName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OLD_BUFFER_NAME:
        return getOldBufferName();

      case NEW_BUFFER_NAME:
        return getNewBufferName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OLD_BUFFER_NAME:
        return isSetOldBufferName();
      case NEW_BUFFER_NAME:
        return isSetNewBufferName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof renameBuffer_args)
        return this.equals((renameBuffer_args)that);
      return false;
    }

    public boolean equals(renameBuffer_args that) {
      if (that == null)
        return false;

      boolean this_present_oldBufferName = true && this.isSetOldBufferName();
      boolean that_present_oldBufferName = true && that.isSetOldBufferName();
      if (this_present_oldBufferName || that_present_oldBufferName) {
        if (!(this_present_oldBufferName && that_present_oldBufferName))
          return false;
        if (!this.oldBufferName.equals(that.oldBufferName))
          return false;
      }

      boolean this_present_newBufferName = true && this.isSetNewBufferName();
      boolean that_present_newBufferName = true && that.isSetNewBufferName();
      if (this_present_newBufferName || that_present_newBufferName) {
        if (!(this_present_newBufferName && that_present_newBufferName))
          return false;
        if (!this.newBufferName.equals(that.newBufferName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_oldBufferName = true && (isSetOldBufferName());
      list.add(present_oldBufferName);
      if (present_oldBufferName)
        list.add(oldBufferName);

      boolean present_newBufferName = true && (isSetNewBufferName());
      list.add(present_newBufferName);
      if (present_newBufferName)
        list.add(newBufferName);

      return list.hashCode();
    }

    @Override
    public int compareTo(renameBuffer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOldBufferName()).compareTo(other.isSetOldBufferName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldBufferName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldBufferName, other.oldBufferName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewBufferName()).compareTo(other.isSetNewBufferName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewBufferName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newBufferName, other.newBufferName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("renameBuffer_args(");
      boolean first = true;

      sb.append("oldBufferName:");
      if (this.oldBufferName == null) {
        sb.append("null");
      } else {
        sb.append(this.oldBufferName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newBufferName:");
      if (this.newBufferName == null) {
        sb.append("null");
      } else {
        sb.append(this.newBufferName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameBuffer_argsStandardSchemeFactory implements SchemeFactory {
      public renameBuffer_argsStandardScheme getScheme() {
        return new renameBuffer_argsStandardScheme();
      }
    }

    private static class renameBuffer_argsStandardScheme extends StandardScheme<renameBuffer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renameBuffer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OLD_BUFFER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oldBufferName = iprot.readString();
                struct.setOldBufferNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_BUFFER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newBufferName = iprot.readString();
                struct.setNewBufferNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renameBuffer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oldBufferName != null) {
          oprot.writeFieldBegin(OLD_BUFFER_NAME_FIELD_DESC);
          oprot.writeString(struct.oldBufferName);
          oprot.writeFieldEnd();
        }
        if (struct.newBufferName != null) {
          oprot.writeFieldBegin(NEW_BUFFER_NAME_FIELD_DESC);
          oprot.writeString(struct.newBufferName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameBuffer_argsTupleSchemeFactory implements SchemeFactory {
      public renameBuffer_argsTupleScheme getScheme() {
        return new renameBuffer_argsTupleScheme();
      }
    }

    private static class renameBuffer_argsTupleScheme extends TupleScheme<renameBuffer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOldBufferName()) {
          optionals.set(0);
        }
        if (struct.isSetNewBufferName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOldBufferName()) {
          oprot.writeString(struct.oldBufferName);
        }
        if (struct.isSetNewBufferName()) {
          oprot.writeString(struct.newBufferName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.oldBufferName = iprot.readString();
          struct.setOldBufferNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newBufferName = iprot.readString();
          struct.setNewBufferNameIsSet(true);
        }
      }
    }

  }

  public static class renameBuffer_result implements org.apache.thrift.TBase<renameBuffer_result, renameBuffer_result._Fields>, java.io.Serializable, Cloneable, Comparable<renameBuffer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renameBuffer_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new renameBuffer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new renameBuffer_resultTupleSchemeFactory());
    }

    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameBuffer_result.class, metaDataMap);
    }

    public renameBuffer_result() {
    }

    public renameBuffer_result(
      emException err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameBuffer_result(renameBuffer_result other) {
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public renameBuffer_result deepCopy() {
      return new renameBuffer_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public emException getErr() {
      return this.err;
    }

    public renameBuffer_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof renameBuffer_result)
        return this.equals((renameBuffer_result)that);
      return false;
    }

    public boolean equals(renameBuffer_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(renameBuffer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("renameBuffer_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class renameBuffer_resultStandardSchemeFactory implements SchemeFactory {
      public renameBuffer_resultStandardScheme getScheme() {
        return new renameBuffer_resultStandardScheme();
      }
    }

    private static class renameBuffer_resultStandardScheme extends StandardScheme<renameBuffer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, renameBuffer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, renameBuffer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class renameBuffer_resultTupleSchemeFactory implements SchemeFactory {
      public renameBuffer_resultTupleScheme getScheme() {
        return new renameBuffer_resultTupleScheme();
      }
    }

    private static class renameBuffer_resultTupleScheme extends TupleScheme<renameBuffer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, renameBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, renameBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class saveBuffer_args implements org.apache.thrift.TBase<saveBuffer_args, saveBuffer_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveBuffer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBuffer_args");

    private static final org.apache.thrift.protocol.TField BUFFER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBuffer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBuffer_argsTupleSchemeFactory());
    }

    /**
     * The buffer name
     */
    public String bufferName; // required
    /**
     * Where to save it to
     */
    public String fileName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * The buffer name
       */
      BUFFER_NAME((short)1, "bufferName"),
      /**
       * Where to save it to
       */
      FILE_NAME((short)2, "fileName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUFFER_NAME
            return BUFFER_NAME;
          case 2: // FILE_NAME
            return FILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUFFER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bufferName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBuffer_args.class, metaDataMap);
    }

    public saveBuffer_args() {
    }

    public saveBuffer_args(
      String bufferName,
      String fileName)
    {
      this();
      this.bufferName = bufferName;
      this.fileName = fileName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBuffer_args(saveBuffer_args other) {
      if (other.isSetBufferName()) {
        this.bufferName = other.bufferName;
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
    }

    public saveBuffer_args deepCopy() {
      return new saveBuffer_args(this);
    }

    @Override
    public void clear() {
      this.bufferName = null;
      this.fileName = null;
    }

    /**
     * The buffer name
     */
    public String getBufferName() {
      return this.bufferName;
    }

    /**
     * The buffer name
     */
    public saveBuffer_args setBufferName(String bufferName) {
      this.bufferName = bufferName;
      return this;
    }

    public void unsetBufferName() {
      this.bufferName = null;
    }

    /** Returns true if field bufferName is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferName() {
      return this.bufferName != null;
    }

    public void setBufferNameIsSet(boolean value) {
      if (!value) {
        this.bufferName = null;
      }
    }

    /**
     * Where to save it to
     */
    public String getFileName() {
      return this.fileName;
    }

    /**
     * Where to save it to
     */
    public saveBuffer_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUFFER_NAME:
        if (value == null) {
          unsetBufferName();
        } else {
          setBufferName((String)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUFFER_NAME:
        return getBufferName();

      case FILE_NAME:
        return getFileName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUFFER_NAME:
        return isSetBufferName();
      case FILE_NAME:
        return isSetFileName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBuffer_args)
        return this.equals((saveBuffer_args)that);
      return false;
    }

    public boolean equals(saveBuffer_args that) {
      if (that == null)
        return false;

      boolean this_present_bufferName = true && this.isSetBufferName();
      boolean that_present_bufferName = true && that.isSetBufferName();
      if (this_present_bufferName || that_present_bufferName) {
        if (!(this_present_bufferName && that_present_bufferName))
          return false;
        if (!this.bufferName.equals(that.bufferName))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bufferName = true && (isSetBufferName());
      list.add(present_bufferName);
      if (present_bufferName)
        list.add(bufferName);

      boolean present_fileName = true && (isSetFileName());
      list.add(present_fileName);
      if (present_fileName)
        list.add(fileName);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBuffer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBufferName()).compareTo(other.isSetBufferName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferName, other.bufferName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBuffer_args(");
      boolean first = true;

      sb.append("bufferName:");
      if (this.bufferName == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBuffer_argsStandardSchemeFactory implements SchemeFactory {
      public saveBuffer_argsStandardScheme getScheme() {
        return new saveBuffer_argsStandardScheme();
      }
    }

    private static class saveBuffer_argsStandardScheme extends StandardScheme<saveBuffer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBuffer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFFER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferName = iprot.readString();
                struct.setBufferNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBuffer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bufferName != null) {
          oprot.writeFieldBegin(BUFFER_NAME_FIELD_DESC);
          oprot.writeString(struct.bufferName);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBuffer_argsTupleSchemeFactory implements SchemeFactory {
      public saveBuffer_argsTupleScheme getScheme() {
        return new saveBuffer_argsTupleScheme();
      }
    }

    private static class saveBuffer_argsTupleScheme extends TupleScheme<saveBuffer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBufferName()) {
          optionals.set(0);
        }
        if (struct.isSetFileName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBufferName()) {
          oprot.writeString(struct.bufferName);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bufferName = iprot.readString();
          struct.setBufferNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
      }
    }

  }

  public static class saveBuffer_result implements org.apache.thrift.TBase<saveBuffer_result, saveBuffer_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveBuffer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBuffer_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBuffer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBuffer_resultTupleSchemeFactory());
    }

    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBuffer_result.class, metaDataMap);
    }

    public saveBuffer_result() {
    }

    public saveBuffer_result(
      emException err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBuffer_result(saveBuffer_result other) {
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public saveBuffer_result deepCopy() {
      return new saveBuffer_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public emException getErr() {
      return this.err;
    }

    public saveBuffer_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBuffer_result)
        return this.equals((saveBuffer_result)that);
      return false;
    }

    public boolean equals(saveBuffer_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBuffer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBuffer_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBuffer_resultStandardSchemeFactory implements SchemeFactory {
      public saveBuffer_resultStandardScheme getScheme() {
        return new saveBuffer_resultStandardScheme();
      }
    }

    private static class saveBuffer_resultStandardScheme extends StandardScheme<saveBuffer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBuffer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBuffer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBuffer_resultTupleSchemeFactory implements SchemeFactory {
      public saveBuffer_resultTupleScheme getScheme() {
        return new saveBuffer_resultTupleScheme();
      }
    }

    private static class saveBuffer_resultTupleScheme extends TupleScheme<saveBuffer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class loadBuffer_args implements org.apache.thrift.TBase<loadBuffer_args, loadBuffer_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadBuffer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadBuffer_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadBuffer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadBuffer_argsTupleSchemeFactory());
    }

    /**
     * File containing the buffer
     */
    public String fileName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * File containing the buffer
       */
      FILE_NAME((short)1, "fileName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadBuffer_args.class, metaDataMap);
    }

    public loadBuffer_args() {
    }

    public loadBuffer_args(
      String fileName)
    {
      this();
      this.fileName = fileName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadBuffer_args(loadBuffer_args other) {
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
    }

    public loadBuffer_args deepCopy() {
      return new loadBuffer_args(this);
    }

    @Override
    public void clear() {
      this.fileName = null;
    }

    /**
     * File containing the buffer
     */
    public String getFileName() {
      return this.fileName;
    }

    /**
     * File containing the buffer
     */
    public loadBuffer_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_NAME:
        return getFileName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_NAME:
        return isSetFileName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadBuffer_args)
        return this.equals((loadBuffer_args)that);
      return false;
    }

    public boolean equals(loadBuffer_args that) {
      if (that == null)
        return false;

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fileName = true && (isSetFileName());
      list.add(present_fileName);
      if (present_fileName)
        list.add(fileName);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadBuffer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadBuffer_args(");
      boolean first = true;

      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadBuffer_argsStandardSchemeFactory implements SchemeFactory {
      public loadBuffer_argsStandardScheme getScheme() {
        return new loadBuffer_argsStandardScheme();
      }
    }

    private static class loadBuffer_argsStandardScheme extends StandardScheme<loadBuffer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadBuffer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadBuffer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadBuffer_argsTupleSchemeFactory implements SchemeFactory {
      public loadBuffer_argsTupleScheme getScheme() {
        return new loadBuffer_argsTupleScheme();
      }
    }

    private static class loadBuffer_argsTupleScheme extends TupleScheme<loadBuffer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadBuffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
      }
    }

  }

  public static class loadBuffer_result implements org.apache.thrift.TBase<loadBuffer_result, loadBuffer_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadBuffer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadBuffer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadBuffer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadBuffer_resultTupleSchemeFactory());
    }

    public String success; // required
    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadBuffer_result.class, metaDataMap);
    }

    public loadBuffer_result() {
    }

    public loadBuffer_result(
      String success,
      emException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadBuffer_result(loadBuffer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public loadBuffer_result deepCopy() {
      return new loadBuffer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadBuffer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public emException getErr() {
      return this.err;
    }

    public loadBuffer_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadBuffer_result)
        return this.equals((loadBuffer_result)that);
      return false;
    }

    public boolean equals(loadBuffer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadBuffer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadBuffer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadBuffer_resultStandardSchemeFactory implements SchemeFactory {
      public loadBuffer_resultStandardScheme getScheme() {
        return new loadBuffer_resultStandardScheme();
      }
    }

    private static class loadBuffer_resultStandardScheme extends StandardScheme<loadBuffer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadBuffer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadBuffer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadBuffer_resultTupleSchemeFactory implements SchemeFactory {
      public loadBuffer_resultTupleScheme getScheme() {
        return new loadBuffer_resultTupleScheme();
      }
    }

    private static class loadBuffer_resultTupleScheme extends TupleScheme<loadBuffer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadBuffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class absDifference_args implements org.apache.thrift.TBase<absDifference_args, absDifference_args._Fields>, java.io.Serializable, Cloneable, Comparable<absDifference_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("absDifference_args");

    private static final org.apache.thrift.protocol.TField BUFFER_A_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferA", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BUFFER_B_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferB", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new absDifference_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new absDifference_argsTupleSchemeFactory());
    }

    public String bufferA; // required
    public String bufferB; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUFFER_A((short)1, "bufferA"),
      BUFFER_B((short)2, "bufferB");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUFFER_A
            return BUFFER_A;
          case 2: // BUFFER_B
            return BUFFER_B;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUFFER_A, new org.apache.thrift.meta_data.FieldMetaData("bufferA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUFFER_B, new org.apache.thrift.meta_data.FieldMetaData("bufferB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(absDifference_args.class, metaDataMap);
    }

    public absDifference_args() {
    }

    public absDifference_args(
      String bufferA,
      String bufferB)
    {
      this();
      this.bufferA = bufferA;
      this.bufferB = bufferB;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public absDifference_args(absDifference_args other) {
      if (other.isSetBufferA()) {
        this.bufferA = other.bufferA;
      }
      if (other.isSetBufferB()) {
        this.bufferB = other.bufferB;
      }
    }

    public absDifference_args deepCopy() {
      return new absDifference_args(this);
    }

    @Override
    public void clear() {
      this.bufferA = null;
      this.bufferB = null;
    }

    public String getBufferA() {
      return this.bufferA;
    }

    public absDifference_args setBufferA(String bufferA) {
      this.bufferA = bufferA;
      return this;
    }

    public void unsetBufferA() {
      this.bufferA = null;
    }

    /** Returns true if field bufferA is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferA() {
      return this.bufferA != null;
    }

    public void setBufferAIsSet(boolean value) {
      if (!value) {
        this.bufferA = null;
      }
    }

    public String getBufferB() {
      return this.bufferB;
    }

    public absDifference_args setBufferB(String bufferB) {
      this.bufferB = bufferB;
      return this;
    }

    public void unsetBufferB() {
      this.bufferB = null;
    }

    /** Returns true if field bufferB is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferB() {
      return this.bufferB != null;
    }

    public void setBufferBIsSet(boolean value) {
      if (!value) {
        this.bufferB = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUFFER_A:
        if (value == null) {
          unsetBufferA();
        } else {
          setBufferA((String)value);
        }
        break;

      case BUFFER_B:
        if (value == null) {
          unsetBufferB();
        } else {
          setBufferB((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUFFER_A:
        return getBufferA();

      case BUFFER_B:
        return getBufferB();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUFFER_A:
        return isSetBufferA();
      case BUFFER_B:
        return isSetBufferB();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof absDifference_args)
        return this.equals((absDifference_args)that);
      return false;
    }

    public boolean equals(absDifference_args that) {
      if (that == null)
        return false;

      boolean this_present_bufferA = true && this.isSetBufferA();
      boolean that_present_bufferA = true && that.isSetBufferA();
      if (this_present_bufferA || that_present_bufferA) {
        if (!(this_present_bufferA && that_present_bufferA))
          return false;
        if (!this.bufferA.equals(that.bufferA))
          return false;
      }

      boolean this_present_bufferB = true && this.isSetBufferB();
      boolean that_present_bufferB = true && that.isSetBufferB();
      if (this_present_bufferB || that_present_bufferB) {
        if (!(this_present_bufferB && that_present_bufferB))
          return false;
        if (!this.bufferB.equals(that.bufferB))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bufferA = true && (isSetBufferA());
      list.add(present_bufferA);
      if (present_bufferA)
        list.add(bufferA);

      boolean present_bufferB = true && (isSetBufferB());
      list.add(present_bufferB);
      if (present_bufferB)
        list.add(bufferB);

      return list.hashCode();
    }

    @Override
    public int compareTo(absDifference_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBufferA()).compareTo(other.isSetBufferA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferA, other.bufferA);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBufferB()).compareTo(other.isSetBufferB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferB, other.bufferB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("absDifference_args(");
      boolean first = true;

      sb.append("bufferA:");
      if (this.bufferA == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferA);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bufferB:");
      if (this.bufferB == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferB);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class absDifference_argsStandardSchemeFactory implements SchemeFactory {
      public absDifference_argsStandardScheme getScheme() {
        return new absDifference_argsStandardScheme();
      }
    }

    private static class absDifference_argsStandardScheme extends StandardScheme<absDifference_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, absDifference_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFFER_A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferA = iprot.readString();
                struct.setBufferAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BUFFER_B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferB = iprot.readString();
                struct.setBufferBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, absDifference_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bufferA != null) {
          oprot.writeFieldBegin(BUFFER_A_FIELD_DESC);
          oprot.writeString(struct.bufferA);
          oprot.writeFieldEnd();
        }
        if (struct.bufferB != null) {
          oprot.writeFieldBegin(BUFFER_B_FIELD_DESC);
          oprot.writeString(struct.bufferB);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class absDifference_argsTupleSchemeFactory implements SchemeFactory {
      public absDifference_argsTupleScheme getScheme() {
        return new absDifference_argsTupleScheme();
      }
    }

    private static class absDifference_argsTupleScheme extends TupleScheme<absDifference_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, absDifference_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBufferA()) {
          optionals.set(0);
        }
        if (struct.isSetBufferB()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBufferA()) {
          oprot.writeString(struct.bufferA);
        }
        if (struct.isSetBufferB()) {
          oprot.writeString(struct.bufferB);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, absDifference_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bufferA = iprot.readString();
          struct.setBufferAIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bufferB = iprot.readString();
          struct.setBufferBIsSet(true);
        }
      }
    }

  }

  public static class absDifference_result implements org.apache.thrift.TBase<absDifference_result, absDifference_result._Fields>, java.io.Serializable, Cloneable, Comparable<absDifference_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("absDifference_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new absDifference_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new absDifference_resultTupleSchemeFactory());
    }

    public String success; // required
    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(absDifference_result.class, metaDataMap);
    }

    public absDifference_result() {
    }

    public absDifference_result(
      String success,
      emException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public absDifference_result(absDifference_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public absDifference_result deepCopy() {
      return new absDifference_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public absDifference_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public emException getErr() {
      return this.err;
    }

    public absDifference_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof absDifference_result)
        return this.equals((absDifference_result)that);
      return false;
    }

    public boolean equals(absDifference_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(absDifference_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("absDifference_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class absDifference_resultStandardSchemeFactory implements SchemeFactory {
      public absDifference_resultStandardScheme getScheme() {
        return new absDifference_resultStandardScheme();
      }
    }

    private static class absDifference_resultStandardScheme extends StandardScheme<absDifference_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, absDifference_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, absDifference_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class absDifference_resultTupleSchemeFactory implements SchemeFactory {
      public absDifference_resultTupleScheme getScheme() {
        return new absDifference_resultTupleScheme();
      }
    }

    private static class absDifference_resultTupleScheme extends TupleScheme<absDifference_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, absDifference_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, absDifference_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class sum_args implements org.apache.thrift.TBase<sum_args, sum_args._Fields>, java.io.Serializable, Cloneable, Comparable<sum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sum_args");

    private static final org.apache.thrift.protocol.TField BUFFER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sum_argsTupleSchemeFactory());
    }

    public String bufferName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUFFER_NAME((short)1, "bufferName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUFFER_NAME
            return BUFFER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUFFER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bufferName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sum_args.class, metaDataMap);
    }

    public sum_args() {
    }

    public sum_args(
      String bufferName)
    {
      this();
      this.bufferName = bufferName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sum_args(sum_args other) {
      if (other.isSetBufferName()) {
        this.bufferName = other.bufferName;
      }
    }

    public sum_args deepCopy() {
      return new sum_args(this);
    }

    @Override
    public void clear() {
      this.bufferName = null;
    }

    public String getBufferName() {
      return this.bufferName;
    }

    public sum_args setBufferName(String bufferName) {
      this.bufferName = bufferName;
      return this;
    }

    public void unsetBufferName() {
      this.bufferName = null;
    }

    /** Returns true if field bufferName is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferName() {
      return this.bufferName != null;
    }

    public void setBufferNameIsSet(boolean value) {
      if (!value) {
        this.bufferName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUFFER_NAME:
        if (value == null) {
          unsetBufferName();
        } else {
          setBufferName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUFFER_NAME:
        return getBufferName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUFFER_NAME:
        return isSetBufferName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sum_args)
        return this.equals((sum_args)that);
      return false;
    }

    public boolean equals(sum_args that) {
      if (that == null)
        return false;

      boolean this_present_bufferName = true && this.isSetBufferName();
      boolean that_present_bufferName = true && that.isSetBufferName();
      if (this_present_bufferName || that_present_bufferName) {
        if (!(this_present_bufferName && that_present_bufferName))
          return false;
        if (!this.bufferName.equals(that.bufferName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bufferName = true && (isSetBufferName());
      list.add(present_bufferName);
      if (present_bufferName)
        list.add(bufferName);

      return list.hashCode();
    }

    @Override
    public int compareTo(sum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBufferName()).compareTo(other.isSetBufferName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferName, other.bufferName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sum_args(");
      boolean first = true;

      sb.append("bufferName:");
      if (this.bufferName == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sum_argsStandardSchemeFactory implements SchemeFactory {
      public sum_argsStandardScheme getScheme() {
        return new sum_argsStandardScheme();
      }
    }

    private static class sum_argsStandardScheme extends StandardScheme<sum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFFER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferName = iprot.readString();
                struct.setBufferNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bufferName != null) {
          oprot.writeFieldBegin(BUFFER_NAME_FIELD_DESC);
          oprot.writeString(struct.bufferName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sum_argsTupleSchemeFactory implements SchemeFactory {
      public sum_argsTupleScheme getScheme() {
        return new sum_argsTupleScheme();
      }
    }

    private static class sum_argsTupleScheme extends TupleScheme<sum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBufferName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBufferName()) {
          oprot.writeString(struct.bufferName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bufferName = iprot.readString();
          struct.setBufferNameIsSet(true);
        }
      }
    }

  }

  public static class sum_result implements org.apache.thrift.TBase<sum_result, sum_result._Fields>, java.io.Serializable, Cloneable, Comparable<sum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sum_resultTupleSchemeFactory());
    }

    public double success; // required
    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sum_result.class, metaDataMap);
    }

    public sum_result() {
    }

    public sum_result(
      double success,
      emException err)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sum_result(sum_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public sum_result deepCopy() {
      return new sum_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.err = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public sum_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public emException getErr() {
      return this.err;
    }

    public sum_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sum_result)
        return this.equals((sum_result)that);
      return false;
    }

    public boolean equals(sum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(sum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sum_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sum_resultStandardSchemeFactory implements SchemeFactory {
      public sum_resultStandardScheme getScheme() {
        return new sum_resultStandardScheme();
      }
    }

    private static class sum_resultStandardScheme extends StandardScheme<sum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sum_resultTupleSchemeFactory implements SchemeFactory {
      public sum_resultTupleScheme getScheme() {
        return new sum_resultTupleScheme();
      }
    }

    private static class sum_resultTupleScheme extends TupleScheme<sum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class sumSquaredDifference_args implements org.apache.thrift.TBase<sumSquaredDifference_args, sumSquaredDifference_args._Fields>, java.io.Serializable, Cloneable, Comparable<sumSquaredDifference_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sumSquaredDifference_args");

    private static final org.apache.thrift.protocol.TField BUFFER_A_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferA", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BUFFER_B_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferB", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sumSquaredDifference_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sumSquaredDifference_argsTupleSchemeFactory());
    }

    public String bufferA; // required
    public String bufferB; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUFFER_A((short)1, "bufferA"),
      BUFFER_B((short)2, "bufferB");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUFFER_A
            return BUFFER_A;
          case 2: // BUFFER_B
            return BUFFER_B;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUFFER_A, new org.apache.thrift.meta_data.FieldMetaData("bufferA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUFFER_B, new org.apache.thrift.meta_data.FieldMetaData("bufferB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sumSquaredDifference_args.class, metaDataMap);
    }

    public sumSquaredDifference_args() {
    }

    public sumSquaredDifference_args(
      String bufferA,
      String bufferB)
    {
      this();
      this.bufferA = bufferA;
      this.bufferB = bufferB;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sumSquaredDifference_args(sumSquaredDifference_args other) {
      if (other.isSetBufferA()) {
        this.bufferA = other.bufferA;
      }
      if (other.isSetBufferB()) {
        this.bufferB = other.bufferB;
      }
    }

    public sumSquaredDifference_args deepCopy() {
      return new sumSquaredDifference_args(this);
    }

    @Override
    public void clear() {
      this.bufferA = null;
      this.bufferB = null;
    }

    public String getBufferA() {
      return this.bufferA;
    }

    public sumSquaredDifference_args setBufferA(String bufferA) {
      this.bufferA = bufferA;
      return this;
    }

    public void unsetBufferA() {
      this.bufferA = null;
    }

    /** Returns true if field bufferA is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferA() {
      return this.bufferA != null;
    }

    public void setBufferAIsSet(boolean value) {
      if (!value) {
        this.bufferA = null;
      }
    }

    public String getBufferB() {
      return this.bufferB;
    }

    public sumSquaredDifference_args setBufferB(String bufferB) {
      this.bufferB = bufferB;
      return this;
    }

    public void unsetBufferB() {
      this.bufferB = null;
    }

    /** Returns true if field bufferB is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferB() {
      return this.bufferB != null;
    }

    public void setBufferBIsSet(boolean value) {
      if (!value) {
        this.bufferB = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUFFER_A:
        if (value == null) {
          unsetBufferA();
        } else {
          setBufferA((String)value);
        }
        break;

      case BUFFER_B:
        if (value == null) {
          unsetBufferB();
        } else {
          setBufferB((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUFFER_A:
        return getBufferA();

      case BUFFER_B:
        return getBufferB();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUFFER_A:
        return isSetBufferA();
      case BUFFER_B:
        return isSetBufferB();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sumSquaredDifference_args)
        return this.equals((sumSquaredDifference_args)that);
      return false;
    }

    public boolean equals(sumSquaredDifference_args that) {
      if (that == null)
        return false;

      boolean this_present_bufferA = true && this.isSetBufferA();
      boolean that_present_bufferA = true && that.isSetBufferA();
      if (this_present_bufferA || that_present_bufferA) {
        if (!(this_present_bufferA && that_present_bufferA))
          return false;
        if (!this.bufferA.equals(that.bufferA))
          return false;
      }

      boolean this_present_bufferB = true && this.isSetBufferB();
      boolean that_present_bufferB = true && that.isSetBufferB();
      if (this_present_bufferB || that_present_bufferB) {
        if (!(this_present_bufferB && that_present_bufferB))
          return false;
        if (!this.bufferB.equals(that.bufferB))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bufferA = true && (isSetBufferA());
      list.add(present_bufferA);
      if (present_bufferA)
        list.add(bufferA);

      boolean present_bufferB = true && (isSetBufferB());
      list.add(present_bufferB);
      if (present_bufferB)
        list.add(bufferB);

      return list.hashCode();
    }

    @Override
    public int compareTo(sumSquaredDifference_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBufferA()).compareTo(other.isSetBufferA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferA, other.bufferA);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBufferB()).compareTo(other.isSetBufferB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferB, other.bufferB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sumSquaredDifference_args(");
      boolean first = true;

      sb.append("bufferA:");
      if (this.bufferA == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferA);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bufferB:");
      if (this.bufferB == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferB);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sumSquaredDifference_argsStandardSchemeFactory implements SchemeFactory {
      public sumSquaredDifference_argsStandardScheme getScheme() {
        return new sumSquaredDifference_argsStandardScheme();
      }
    }

    private static class sumSquaredDifference_argsStandardScheme extends StandardScheme<sumSquaredDifference_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sumSquaredDifference_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFFER_A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferA = iprot.readString();
                struct.setBufferAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BUFFER_B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferB = iprot.readString();
                struct.setBufferBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sumSquaredDifference_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bufferA != null) {
          oprot.writeFieldBegin(BUFFER_A_FIELD_DESC);
          oprot.writeString(struct.bufferA);
          oprot.writeFieldEnd();
        }
        if (struct.bufferB != null) {
          oprot.writeFieldBegin(BUFFER_B_FIELD_DESC);
          oprot.writeString(struct.bufferB);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sumSquaredDifference_argsTupleSchemeFactory implements SchemeFactory {
      public sumSquaredDifference_argsTupleScheme getScheme() {
        return new sumSquaredDifference_argsTupleScheme();
      }
    }

    private static class sumSquaredDifference_argsTupleScheme extends TupleScheme<sumSquaredDifference_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sumSquaredDifference_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBufferA()) {
          optionals.set(0);
        }
        if (struct.isSetBufferB()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBufferA()) {
          oprot.writeString(struct.bufferA);
        }
        if (struct.isSetBufferB()) {
          oprot.writeString(struct.bufferB);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sumSquaredDifference_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bufferA = iprot.readString();
          struct.setBufferAIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bufferB = iprot.readString();
          struct.setBufferBIsSet(true);
        }
      }
    }

  }

  public static class sumSquaredDifference_result implements org.apache.thrift.TBase<sumSquaredDifference_result, sumSquaredDifference_result._Fields>, java.io.Serializable, Cloneable, Comparable<sumSquaredDifference_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sumSquaredDifference_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sumSquaredDifference_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sumSquaredDifference_resultTupleSchemeFactory());
    }

    public double success; // required
    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sumSquaredDifference_result.class, metaDataMap);
    }

    public sumSquaredDifference_result() {
    }

    public sumSquaredDifference_result(
      double success,
      emException err)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sumSquaredDifference_result(sumSquaredDifference_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public sumSquaredDifference_result deepCopy() {
      return new sumSquaredDifference_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.err = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public sumSquaredDifference_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public emException getErr() {
      return this.err;
    }

    public sumSquaredDifference_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sumSquaredDifference_result)
        return this.equals((sumSquaredDifference_result)that);
      return false;
    }

    public boolean equals(sumSquaredDifference_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(sumSquaredDifference_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sumSquaredDifference_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sumSquaredDifference_resultStandardSchemeFactory implements SchemeFactory {
      public sumSquaredDifference_resultStandardScheme getScheme() {
        return new sumSquaredDifference_resultStandardScheme();
      }
    }

    private static class sumSquaredDifference_resultStandardScheme extends StandardScheme<sumSquaredDifference_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sumSquaredDifference_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sumSquaredDifference_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sumSquaredDifference_resultTupleSchemeFactory implements SchemeFactory {
      public sumSquaredDifference_resultTupleScheme getScheme() {
        return new sumSquaredDifference_resultTupleScheme();
      }
    }

    private static class sumSquaredDifference_resultTupleScheme extends TupleScheme<sumSquaredDifference_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sumSquaredDifference_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sumSquaredDifference_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class subtract_args implements org.apache.thrift.TBase<subtract_args, subtract_args._Fields>, java.io.Serializable, Cloneable, Comparable<subtract_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subtract_args");

    private static final org.apache.thrift.protocol.TField BUFFER_A_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferA", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BUFFER_B_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferB", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new subtract_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new subtract_argsTupleSchemeFactory());
    }

    public String bufferA; // required
    public String bufferB; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUFFER_A((short)1, "bufferA"),
      BUFFER_B((short)2, "bufferB");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUFFER_A
            return BUFFER_A;
          case 2: // BUFFER_B
            return BUFFER_B;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUFFER_A, new org.apache.thrift.meta_data.FieldMetaData("bufferA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUFFER_B, new org.apache.thrift.meta_data.FieldMetaData("bufferB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subtract_args.class, metaDataMap);
    }

    public subtract_args() {
    }

    public subtract_args(
      String bufferA,
      String bufferB)
    {
      this();
      this.bufferA = bufferA;
      this.bufferB = bufferB;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subtract_args(subtract_args other) {
      if (other.isSetBufferA()) {
        this.bufferA = other.bufferA;
      }
      if (other.isSetBufferB()) {
        this.bufferB = other.bufferB;
      }
    }

    public subtract_args deepCopy() {
      return new subtract_args(this);
    }

    @Override
    public void clear() {
      this.bufferA = null;
      this.bufferB = null;
    }

    public String getBufferA() {
      return this.bufferA;
    }

    public subtract_args setBufferA(String bufferA) {
      this.bufferA = bufferA;
      return this;
    }

    public void unsetBufferA() {
      this.bufferA = null;
    }

    /** Returns true if field bufferA is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferA() {
      return this.bufferA != null;
    }

    public void setBufferAIsSet(boolean value) {
      if (!value) {
        this.bufferA = null;
      }
    }

    public String getBufferB() {
      return this.bufferB;
    }

    public subtract_args setBufferB(String bufferB) {
      this.bufferB = bufferB;
      return this;
    }

    public void unsetBufferB() {
      this.bufferB = null;
    }

    /** Returns true if field bufferB is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferB() {
      return this.bufferB != null;
    }

    public void setBufferBIsSet(boolean value) {
      if (!value) {
        this.bufferB = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUFFER_A:
        if (value == null) {
          unsetBufferA();
        } else {
          setBufferA((String)value);
        }
        break;

      case BUFFER_B:
        if (value == null) {
          unsetBufferB();
        } else {
          setBufferB((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUFFER_A:
        return getBufferA();

      case BUFFER_B:
        return getBufferB();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUFFER_A:
        return isSetBufferA();
      case BUFFER_B:
        return isSetBufferB();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof subtract_args)
        return this.equals((subtract_args)that);
      return false;
    }

    public boolean equals(subtract_args that) {
      if (that == null)
        return false;

      boolean this_present_bufferA = true && this.isSetBufferA();
      boolean that_present_bufferA = true && that.isSetBufferA();
      if (this_present_bufferA || that_present_bufferA) {
        if (!(this_present_bufferA && that_present_bufferA))
          return false;
        if (!this.bufferA.equals(that.bufferA))
          return false;
      }

      boolean this_present_bufferB = true && this.isSetBufferB();
      boolean that_present_bufferB = true && that.isSetBufferB();
      if (this_present_bufferB || that_present_bufferB) {
        if (!(this_present_bufferB && that_present_bufferB))
          return false;
        if (!this.bufferB.equals(that.bufferB))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bufferA = true && (isSetBufferA());
      list.add(present_bufferA);
      if (present_bufferA)
        list.add(bufferA);

      boolean present_bufferB = true && (isSetBufferB());
      list.add(present_bufferB);
      if (present_bufferB)
        list.add(bufferB);

      return list.hashCode();
    }

    @Override
    public int compareTo(subtract_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBufferA()).compareTo(other.isSetBufferA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferA, other.bufferA);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBufferB()).compareTo(other.isSetBufferB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferB, other.bufferB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("subtract_args(");
      boolean first = true;

      sb.append("bufferA:");
      if (this.bufferA == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferA);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bufferB:");
      if (this.bufferB == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferB);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subtract_argsStandardSchemeFactory implements SchemeFactory {
      public subtract_argsStandardScheme getScheme() {
        return new subtract_argsStandardScheme();
      }
    }

    private static class subtract_argsStandardScheme extends StandardScheme<subtract_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subtract_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFFER_A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferA = iprot.readString();
                struct.setBufferAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BUFFER_B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferB = iprot.readString();
                struct.setBufferBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subtract_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bufferA != null) {
          oprot.writeFieldBegin(BUFFER_A_FIELD_DESC);
          oprot.writeString(struct.bufferA);
          oprot.writeFieldEnd();
        }
        if (struct.bufferB != null) {
          oprot.writeFieldBegin(BUFFER_B_FIELD_DESC);
          oprot.writeString(struct.bufferB);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subtract_argsTupleSchemeFactory implements SchemeFactory {
      public subtract_argsTupleScheme getScheme() {
        return new subtract_argsTupleScheme();
      }
    }

    private static class subtract_argsTupleScheme extends TupleScheme<subtract_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subtract_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBufferA()) {
          optionals.set(0);
        }
        if (struct.isSetBufferB()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBufferA()) {
          oprot.writeString(struct.bufferA);
        }
        if (struct.isSetBufferB()) {
          oprot.writeString(struct.bufferB);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subtract_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bufferA = iprot.readString();
          struct.setBufferAIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bufferB = iprot.readString();
          struct.setBufferBIsSet(true);
        }
      }
    }

  }

  public static class subtract_result implements org.apache.thrift.TBase<subtract_result, subtract_result._Fields>, java.io.Serializable, Cloneable, Comparable<subtract_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subtract_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new subtract_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new subtract_resultTupleSchemeFactory());
    }

    public String success; // required
    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subtract_result.class, metaDataMap);
    }

    public subtract_result() {
    }

    public subtract_result(
      String success,
      emException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subtract_result(subtract_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public subtract_result deepCopy() {
      return new subtract_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public subtract_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public emException getErr() {
      return this.err;
    }

    public subtract_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof subtract_result)
        return this.equals((subtract_result)that);
      return false;
    }

    public boolean equals(subtract_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(subtract_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("subtract_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subtract_resultStandardSchemeFactory implements SchemeFactory {
      public subtract_resultStandardScheme getScheme() {
        return new subtract_resultStandardScheme();
      }
    }

    private static class subtract_resultStandardScheme extends StandardScheme<subtract_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subtract_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subtract_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subtract_resultTupleSchemeFactory implements SchemeFactory {
      public subtract_resultTupleScheme getScheme() {
        return new subtract_resultTupleScheme();
      }
    }

    private static class subtract_resultTupleScheme extends TupleScheme<subtract_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subtract_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subtract_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class add_args implements org.apache.thrift.TBase<add_args, add_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_args");

    private static final org.apache.thrift.protocol.TField BUFFER_A_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferA", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BUFFER_B_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferB", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_argsTupleSchemeFactory());
    }

    public String bufferA; // required
    public String bufferB; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUFFER_A((short)1, "bufferA"),
      BUFFER_B((short)2, "bufferB");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUFFER_A
            return BUFFER_A;
          case 2: // BUFFER_B
            return BUFFER_B;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUFFER_A, new org.apache.thrift.meta_data.FieldMetaData("bufferA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUFFER_B, new org.apache.thrift.meta_data.FieldMetaData("bufferB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_args.class, metaDataMap);
    }

    public add_args() {
    }

    public add_args(
      String bufferA,
      String bufferB)
    {
      this();
      this.bufferA = bufferA;
      this.bufferB = bufferB;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_args(add_args other) {
      if (other.isSetBufferA()) {
        this.bufferA = other.bufferA;
      }
      if (other.isSetBufferB()) {
        this.bufferB = other.bufferB;
      }
    }

    public add_args deepCopy() {
      return new add_args(this);
    }

    @Override
    public void clear() {
      this.bufferA = null;
      this.bufferB = null;
    }

    public String getBufferA() {
      return this.bufferA;
    }

    public add_args setBufferA(String bufferA) {
      this.bufferA = bufferA;
      return this;
    }

    public void unsetBufferA() {
      this.bufferA = null;
    }

    /** Returns true if field bufferA is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferA() {
      return this.bufferA != null;
    }

    public void setBufferAIsSet(boolean value) {
      if (!value) {
        this.bufferA = null;
      }
    }

    public String getBufferB() {
      return this.bufferB;
    }

    public add_args setBufferB(String bufferB) {
      this.bufferB = bufferB;
      return this;
    }

    public void unsetBufferB() {
      this.bufferB = null;
    }

    /** Returns true if field bufferB is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferB() {
      return this.bufferB != null;
    }

    public void setBufferBIsSet(boolean value) {
      if (!value) {
        this.bufferB = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUFFER_A:
        if (value == null) {
          unsetBufferA();
        } else {
          setBufferA((String)value);
        }
        break;

      case BUFFER_B:
        if (value == null) {
          unsetBufferB();
        } else {
          setBufferB((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUFFER_A:
        return getBufferA();

      case BUFFER_B:
        return getBufferB();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUFFER_A:
        return isSetBufferA();
      case BUFFER_B:
        return isSetBufferB();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_args)
        return this.equals((add_args)that);
      return false;
    }

    public boolean equals(add_args that) {
      if (that == null)
        return false;

      boolean this_present_bufferA = true && this.isSetBufferA();
      boolean that_present_bufferA = true && that.isSetBufferA();
      if (this_present_bufferA || that_present_bufferA) {
        if (!(this_present_bufferA && that_present_bufferA))
          return false;
        if (!this.bufferA.equals(that.bufferA))
          return false;
      }

      boolean this_present_bufferB = true && this.isSetBufferB();
      boolean that_present_bufferB = true && that.isSetBufferB();
      if (this_present_bufferB || that_present_bufferB) {
        if (!(this_present_bufferB && that_present_bufferB))
          return false;
        if (!this.bufferB.equals(that.bufferB))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bufferA = true && (isSetBufferA());
      list.add(present_bufferA);
      if (present_bufferA)
        list.add(bufferA);

      boolean present_bufferB = true && (isSetBufferB());
      list.add(present_bufferB);
      if (present_bufferB)
        list.add(bufferB);

      return list.hashCode();
    }

    @Override
    public int compareTo(add_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBufferA()).compareTo(other.isSetBufferA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferA, other.bufferA);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBufferB()).compareTo(other.isSetBufferB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferB, other.bufferB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_args(");
      boolean first = true;

      sb.append("bufferA:");
      if (this.bufferA == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferA);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bufferB:");
      if (this.bufferB == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferB);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_argsStandardSchemeFactory implements SchemeFactory {
      public add_argsStandardScheme getScheme() {
        return new add_argsStandardScheme();
      }
    }

    private static class add_argsStandardScheme extends StandardScheme<add_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFFER_A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferA = iprot.readString();
                struct.setBufferAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BUFFER_B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferB = iprot.readString();
                struct.setBufferBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bufferA != null) {
          oprot.writeFieldBegin(BUFFER_A_FIELD_DESC);
          oprot.writeString(struct.bufferA);
          oprot.writeFieldEnd();
        }
        if (struct.bufferB != null) {
          oprot.writeFieldBegin(BUFFER_B_FIELD_DESC);
          oprot.writeString(struct.bufferB);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_argsTupleSchemeFactory implements SchemeFactory {
      public add_argsTupleScheme getScheme() {
        return new add_argsTupleScheme();
      }
    }

    private static class add_argsTupleScheme extends TupleScheme<add_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBufferA()) {
          optionals.set(0);
        }
        if (struct.isSetBufferB()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBufferA()) {
          oprot.writeString(struct.bufferA);
        }
        if (struct.isSetBufferB()) {
          oprot.writeString(struct.bufferB);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bufferA = iprot.readString();
          struct.setBufferAIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bufferB = iprot.readString();
          struct.setBufferBIsSet(true);
        }
      }
    }

  }

  public static class add_result implements org.apache.thrift.TBase<add_result, add_result._Fields>, java.io.Serializable, Cloneable, Comparable<add_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new add_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new add_resultTupleSchemeFactory());
    }

    public String success; // required
    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_result.class, metaDataMap);
    }

    public add_result() {
    }

    public add_result(
      String success,
      emException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_result(add_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public add_result deepCopy() {
      return new add_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public add_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public emException getErr() {
      return this.err;
    }

    public add_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_result)
        return this.equals((add_result)that);
      return false;
    }

    public boolean equals(add_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(add_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_resultStandardSchemeFactory implements SchemeFactory {
      public add_resultStandardScheme getScheme() {
        return new add_resultStandardScheme();
      }
    }

    private static class add_resultStandardScheme extends StandardScheme<add_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_resultTupleSchemeFactory implements SchemeFactory {
      public add_resultTupleScheme getScheme() {
        return new add_resultTupleScheme();
      }
    }

    private static class add_resultTupleScheme extends TupleScheme<add_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class setValues_args implements org.apache.thrift.TBase<setValues_args, setValues_args._Fields>, java.io.Serializable, Cloneable, Comparable<setValues_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setValues_args");

    private static final org.apache.thrift.protocol.TField BUFFER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setValues_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setValues_argsTupleSchemeFactory());
    }

    /**
     * Buffer name
     */
    public String bufferName; // required
    /**
     * New value
     */
    public int value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Buffer name
       */
      BUFFER_NAME((short)1, "bufferName"),
      /**
       * New value
       */
      VALUE((short)2, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUFFER_NAME
            return BUFFER_NAME;
          case 2: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VALUE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUFFER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bufferName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setValues_args.class, metaDataMap);
    }

    public setValues_args() {
    }

    public setValues_args(
      String bufferName,
      int value)
    {
      this();
      this.bufferName = bufferName;
      this.value = value;
      setValueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setValues_args(setValues_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBufferName()) {
        this.bufferName = other.bufferName;
      }
      this.value = other.value;
    }

    public setValues_args deepCopy() {
      return new setValues_args(this);
    }

    @Override
    public void clear() {
      this.bufferName = null;
      setValueIsSet(false);
      this.value = 0;
    }

    /**
     * Buffer name
     */
    public String getBufferName() {
      return this.bufferName;
    }

    /**
     * Buffer name
     */
    public setValues_args setBufferName(String bufferName) {
      this.bufferName = bufferName;
      return this;
    }

    public void unsetBufferName() {
      this.bufferName = null;
    }

    /** Returns true if field bufferName is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferName() {
      return this.bufferName != null;
    }

    public void setBufferNameIsSet(boolean value) {
      if (!value) {
        this.bufferName = null;
      }
    }

    /**
     * New value
     */
    public int getValue() {
      return this.value;
    }

    /**
     * New value
     */
    public setValues_args setValue(int value) {
      this.value = value;
      setValueIsSet(true);
      return this;
    }

    public void unsetValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
    }

    public void setValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUFFER_NAME:
        if (value == null) {
          unsetBufferName();
        } else {
          setBufferName((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUFFER_NAME:
        return getBufferName();

      case VALUE:
        return Integer.valueOf(getValue());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUFFER_NAME:
        return isSetBufferName();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setValues_args)
        return this.equals((setValues_args)that);
      return false;
    }

    public boolean equals(setValues_args that) {
      if (that == null)
        return false;

      boolean this_present_bufferName = true && this.isSetBufferName();
      boolean that_present_bufferName = true && that.isSetBufferName();
      if (this_present_bufferName || that_present_bufferName) {
        if (!(this_present_bufferName && that_present_bufferName))
          return false;
        if (!this.bufferName.equals(that.bufferName))
          return false;
      }

      boolean this_present_value = true;
      boolean that_present_value = true;
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (this.value != that.value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bufferName = true && (isSetBufferName());
      list.add(present_bufferName);
      if (present_bufferName)
        list.add(bufferName);

      boolean present_value = true;
      list.add(present_value);
      if (present_value)
        list.add(value);

      return list.hashCode();
    }

    @Override
    public int compareTo(setValues_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBufferName()).compareTo(other.isSetBufferName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferName, other.bufferName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setValues_args(");
      boolean first = true;

      sb.append("bufferName:");
      if (this.bufferName == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      sb.append(this.value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setValues_argsStandardSchemeFactory implements SchemeFactory {
      public setValues_argsStandardScheme getScheme() {
        return new setValues_argsStandardScheme();
      }
    }

    private static class setValues_argsStandardScheme extends StandardScheme<setValues_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setValues_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFFER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferName = iprot.readString();
                struct.setBufferNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.value = iprot.readI32();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setValues_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bufferName != null) {
          oprot.writeFieldBegin(BUFFER_NAME_FIELD_DESC);
          oprot.writeString(struct.bufferName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeI32(struct.value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setValues_argsTupleSchemeFactory implements SchemeFactory {
      public setValues_argsTupleScheme getScheme() {
        return new setValues_argsTupleScheme();
      }
    }

    private static class setValues_argsTupleScheme extends TupleScheme<setValues_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBufferName()) {
          optionals.set(0);
        }
        if (struct.isSetValue()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBufferName()) {
          oprot.writeString(struct.bufferName);
        }
        if (struct.isSetValue()) {
          oprot.writeI32(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setValues_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bufferName = iprot.readString();
          struct.setBufferNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.value = iprot.readI32();
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class setValues_result implements org.apache.thrift.TBase<setValues_result, setValues_result._Fields>, java.io.Serializable, Cloneable, Comparable<setValues_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setValues_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setValues_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setValues_resultTupleSchemeFactory());
    }

    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setValues_result.class, metaDataMap);
    }

    public setValues_result() {
    }

    public setValues_result(
      emException err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setValues_result(setValues_result other) {
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public setValues_result deepCopy() {
      return new setValues_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public emException getErr() {
      return this.err;
    }

    public setValues_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setValues_result)
        return this.equals((setValues_result)that);
      return false;
    }

    public boolean equals(setValues_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(setValues_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setValues_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setValues_resultStandardSchemeFactory implements SchemeFactory {
      public setValues_resultStandardScheme getScheme() {
        return new setValues_resultStandardScheme();
      }
    }

    private static class setValues_resultStandardScheme extends StandardScheme<setValues_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setValues_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setValues_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setValues_resultTupleSchemeFactory implements SchemeFactory {
      public setValues_resultTupleScheme getScheme() {
        return new setValues_resultTupleScheme();
      }
    }

    private static class setValues_resultTupleScheme extends TupleScheme<setValues_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setValues_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class threshold_args implements org.apache.thrift.TBase<threshold_args, threshold_args._Fields>, java.io.Serializable, Cloneable, Comparable<threshold_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("threshold_args");

    private static final org.apache.thrift.protocol.TField BUFFER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField THRESHOLD_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("thresholdValue", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MAX_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxValue", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField INVERT_FIELD_DESC = new org.apache.thrift.protocol.TField("invert", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new threshold_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new threshold_argsTupleSchemeFactory());
    }

    /**
     * Buffer name
     */
    public String bufferName; // required
    /**
     * Value to test against
     */
    public int thresholdValue; // required
    /**
     * Value to set if condition is met
     */
    public int maxValue; // required
    /**
     * Invert response
     */
    public boolean invert; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Buffer name
       */
      BUFFER_NAME((short)1, "bufferName"),
      /**
       * Value to test against
       */
      THRESHOLD_VALUE((short)2, "thresholdValue"),
      /**
       * Value to set if condition is met
       */
      MAX_VALUE((short)3, "maxValue"),
      /**
       * Invert response
       */
      INVERT((short)4, "invert");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUFFER_NAME
            return BUFFER_NAME;
          case 2: // THRESHOLD_VALUE
            return THRESHOLD_VALUE;
          case 3: // MAX_VALUE
            return MAX_VALUE;
          case 4: // INVERT
            return INVERT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __THRESHOLDVALUE_ISSET_ID = 0;
    private static final int __MAXVALUE_ISSET_ID = 1;
    private static final int __INVERT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUFFER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bufferName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.THRESHOLD_VALUE, new org.apache.thrift.meta_data.FieldMetaData("thresholdValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MAX_VALUE, new org.apache.thrift.meta_data.FieldMetaData("maxValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.INVERT, new org.apache.thrift.meta_data.FieldMetaData("invert", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(threshold_args.class, metaDataMap);
    }

    public threshold_args() {
    }

    public threshold_args(
      String bufferName,
      int thresholdValue,
      int maxValue,
      boolean invert)
    {
      this();
      this.bufferName = bufferName;
      this.thresholdValue = thresholdValue;
      setThresholdValueIsSet(true);
      this.maxValue = maxValue;
      setMaxValueIsSet(true);
      this.invert = invert;
      setInvertIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public threshold_args(threshold_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBufferName()) {
        this.bufferName = other.bufferName;
      }
      this.thresholdValue = other.thresholdValue;
      this.maxValue = other.maxValue;
      this.invert = other.invert;
    }

    public threshold_args deepCopy() {
      return new threshold_args(this);
    }

    @Override
    public void clear() {
      this.bufferName = null;
      setThresholdValueIsSet(false);
      this.thresholdValue = 0;
      setMaxValueIsSet(false);
      this.maxValue = 0;
      setInvertIsSet(false);
      this.invert = false;
    }

    /**
     * Buffer name
     */
    public String getBufferName() {
      return this.bufferName;
    }

    /**
     * Buffer name
     */
    public threshold_args setBufferName(String bufferName) {
      this.bufferName = bufferName;
      return this;
    }

    public void unsetBufferName() {
      this.bufferName = null;
    }

    /** Returns true if field bufferName is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferName() {
      return this.bufferName != null;
    }

    public void setBufferNameIsSet(boolean value) {
      if (!value) {
        this.bufferName = null;
      }
    }

    /**
     * Value to test against
     */
    public int getThresholdValue() {
      return this.thresholdValue;
    }

    /**
     * Value to test against
     */
    public threshold_args setThresholdValue(int thresholdValue) {
      this.thresholdValue = thresholdValue;
      setThresholdValueIsSet(true);
      return this;
    }

    public void unsetThresholdValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THRESHOLDVALUE_ISSET_ID);
    }

    /** Returns true if field thresholdValue is set (has been assigned a value) and false otherwise */
    public boolean isSetThresholdValue() {
      return EncodingUtils.testBit(__isset_bitfield, __THRESHOLDVALUE_ISSET_ID);
    }

    public void setThresholdValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THRESHOLDVALUE_ISSET_ID, value);
    }

    /**
     * Value to set if condition is met
     */
    public int getMaxValue() {
      return this.maxValue;
    }

    /**
     * Value to set if condition is met
     */
    public threshold_args setMaxValue(int maxValue) {
      this.maxValue = maxValue;
      setMaxValueIsSet(true);
      return this;
    }

    public void unsetMaxValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXVALUE_ISSET_ID);
    }

    /** Returns true if field maxValue is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxValue() {
      return EncodingUtils.testBit(__isset_bitfield, __MAXVALUE_ISSET_ID);
    }

    public void setMaxValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXVALUE_ISSET_ID, value);
    }

    /**
     * Invert response
     */
    public boolean isInvert() {
      return this.invert;
    }

    /**
     * Invert response
     */
    public threshold_args setInvert(boolean invert) {
      this.invert = invert;
      setInvertIsSet(true);
      return this;
    }

    public void unsetInvert() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVERT_ISSET_ID);
    }

    /** Returns true if field invert is set (has been assigned a value) and false otherwise */
    public boolean isSetInvert() {
      return EncodingUtils.testBit(__isset_bitfield, __INVERT_ISSET_ID);
    }

    public void setInvertIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVERT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUFFER_NAME:
        if (value == null) {
          unsetBufferName();
        } else {
          setBufferName((String)value);
        }
        break;

      case THRESHOLD_VALUE:
        if (value == null) {
          unsetThresholdValue();
        } else {
          setThresholdValue((Integer)value);
        }
        break;

      case MAX_VALUE:
        if (value == null) {
          unsetMaxValue();
        } else {
          setMaxValue((Integer)value);
        }
        break;

      case INVERT:
        if (value == null) {
          unsetInvert();
        } else {
          setInvert((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUFFER_NAME:
        return getBufferName();

      case THRESHOLD_VALUE:
        return Integer.valueOf(getThresholdValue());

      case MAX_VALUE:
        return Integer.valueOf(getMaxValue());

      case INVERT:
        return Boolean.valueOf(isInvert());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUFFER_NAME:
        return isSetBufferName();
      case THRESHOLD_VALUE:
        return isSetThresholdValue();
      case MAX_VALUE:
        return isSetMaxValue();
      case INVERT:
        return isSetInvert();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof threshold_args)
        return this.equals((threshold_args)that);
      return false;
    }

    public boolean equals(threshold_args that) {
      if (that == null)
        return false;

      boolean this_present_bufferName = true && this.isSetBufferName();
      boolean that_present_bufferName = true && that.isSetBufferName();
      if (this_present_bufferName || that_present_bufferName) {
        if (!(this_present_bufferName && that_present_bufferName))
          return false;
        if (!this.bufferName.equals(that.bufferName))
          return false;
      }

      boolean this_present_thresholdValue = true;
      boolean that_present_thresholdValue = true;
      if (this_present_thresholdValue || that_present_thresholdValue) {
        if (!(this_present_thresholdValue && that_present_thresholdValue))
          return false;
        if (this.thresholdValue != that.thresholdValue)
          return false;
      }

      boolean this_present_maxValue = true;
      boolean that_present_maxValue = true;
      if (this_present_maxValue || that_present_maxValue) {
        if (!(this_present_maxValue && that_present_maxValue))
          return false;
        if (this.maxValue != that.maxValue)
          return false;
      }

      boolean this_present_invert = true;
      boolean that_present_invert = true;
      if (this_present_invert || that_present_invert) {
        if (!(this_present_invert && that_present_invert))
          return false;
        if (this.invert != that.invert)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bufferName = true && (isSetBufferName());
      list.add(present_bufferName);
      if (present_bufferName)
        list.add(bufferName);

      boolean present_thresholdValue = true;
      list.add(present_thresholdValue);
      if (present_thresholdValue)
        list.add(thresholdValue);

      boolean present_maxValue = true;
      list.add(present_maxValue);
      if (present_maxValue)
        list.add(maxValue);

      boolean present_invert = true;
      list.add(present_invert);
      if (present_invert)
        list.add(invert);

      return list.hashCode();
    }

    @Override
    public int compareTo(threshold_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBufferName()).compareTo(other.isSetBufferName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferName, other.bufferName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetThresholdValue()).compareTo(other.isSetThresholdValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThresholdValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thresholdValue, other.thresholdValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxValue()).compareTo(other.isSetMaxValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxValue, other.maxValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvert()).compareTo(other.isSetInvert());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvert()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invert, other.invert);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("threshold_args(");
      boolean first = true;

      sb.append("bufferName:");
      if (this.bufferName == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("thresholdValue:");
      sb.append(this.thresholdValue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxValue:");
      sb.append(this.maxValue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("invert:");
      sb.append(this.invert);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class threshold_argsStandardSchemeFactory implements SchemeFactory {
      public threshold_argsStandardScheme getScheme() {
        return new threshold_argsStandardScheme();
      }
    }

    private static class threshold_argsStandardScheme extends StandardScheme<threshold_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, threshold_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFFER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferName = iprot.readString();
                struct.setBufferNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // THRESHOLD_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.thresholdValue = iprot.readI32();
                struct.setThresholdValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MAX_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maxValue = iprot.readI32();
                struct.setMaxValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INVERT
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.invert = iprot.readBool();
                struct.setInvertIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, threshold_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bufferName != null) {
          oprot.writeFieldBegin(BUFFER_NAME_FIELD_DESC);
          oprot.writeString(struct.bufferName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(THRESHOLD_VALUE_FIELD_DESC);
        oprot.writeI32(struct.thresholdValue);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_VALUE_FIELD_DESC);
        oprot.writeI32(struct.maxValue);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INVERT_FIELD_DESC);
        oprot.writeBool(struct.invert);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class threshold_argsTupleSchemeFactory implements SchemeFactory {
      public threshold_argsTupleScheme getScheme() {
        return new threshold_argsTupleScheme();
      }
    }

    private static class threshold_argsTupleScheme extends TupleScheme<threshold_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, threshold_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBufferName()) {
          optionals.set(0);
        }
        if (struct.isSetThresholdValue()) {
          optionals.set(1);
        }
        if (struct.isSetMaxValue()) {
          optionals.set(2);
        }
        if (struct.isSetInvert()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBufferName()) {
          oprot.writeString(struct.bufferName);
        }
        if (struct.isSetThresholdValue()) {
          oprot.writeI32(struct.thresholdValue);
        }
        if (struct.isSetMaxValue()) {
          oprot.writeI32(struct.maxValue);
        }
        if (struct.isSetInvert()) {
          oprot.writeBool(struct.invert);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, threshold_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bufferName = iprot.readString();
          struct.setBufferNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.thresholdValue = iprot.readI32();
          struct.setThresholdValueIsSet(true);
        }
        if (incoming.get(2)) {
          struct.maxValue = iprot.readI32();
          struct.setMaxValueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.invert = iprot.readBool();
          struct.setInvertIsSet(true);
        }
      }
    }

  }

  public static class threshold_result implements org.apache.thrift.TBase<threshold_result, threshold_result._Fields>, java.io.Serializable, Cloneable, Comparable<threshold_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("threshold_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new threshold_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new threshold_resultTupleSchemeFactory());
    }

    public String success; // required
    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(threshold_result.class, metaDataMap);
    }

    public threshold_result() {
    }

    public threshold_result(
      String success,
      emException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public threshold_result(threshold_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public threshold_result deepCopy() {
      return new threshold_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public threshold_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public emException getErr() {
      return this.err;
    }

    public threshold_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof threshold_result)
        return this.equals((threshold_result)that);
      return false;
    }

    public boolean equals(threshold_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(threshold_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("threshold_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class threshold_resultStandardSchemeFactory implements SchemeFactory {
      public threshold_resultStandardScheme getScheme() {
        return new threshold_resultStandardScheme();
      }
    }

    private static class threshold_resultStandardScheme extends StandardScheme<threshold_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, threshold_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, threshold_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class threshold_resultTupleSchemeFactory implements SchemeFactory {
      public threshold_resultTupleScheme getScheme() {
        return new threshold_resultTupleScheme();
      }
    }

    private static class threshold_resultTupleScheme extends TupleScheme<threshold_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, threshold_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, threshold_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class normalize_args implements org.apache.thrift.TBase<normalize_args, normalize_args._Fields>, java.io.Serializable, Cloneable, Comparable<normalize_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("normalize_args");

    private static final org.apache.thrift.protocol.TField BUFFER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MIN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("minValue", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MAX_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxValue", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new normalize_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new normalize_argsTupleSchemeFactory());
    }

    /**
     * Buffer name
     */
    public String bufferName; // required
    /**
     * Normalize from
     */
    public int minValue; // required
    /**
     * Normalize to
     */
    public int maxValue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Buffer name
       */
      BUFFER_NAME((short)1, "bufferName"),
      /**
       * Normalize from
       */
      MIN_VALUE((short)2, "minValue"),
      /**
       * Normalize to
       */
      MAX_VALUE((short)3, "maxValue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUFFER_NAME
            return BUFFER_NAME;
          case 2: // MIN_VALUE
            return MIN_VALUE;
          case 3: // MAX_VALUE
            return MAX_VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MINVALUE_ISSET_ID = 0;
    private static final int __MAXVALUE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUFFER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bufferName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MIN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("minValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MAX_VALUE, new org.apache.thrift.meta_data.FieldMetaData("maxValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(normalize_args.class, metaDataMap);
    }

    public normalize_args() {
    }

    public normalize_args(
      String bufferName,
      int minValue,
      int maxValue)
    {
      this();
      this.bufferName = bufferName;
      this.minValue = minValue;
      setMinValueIsSet(true);
      this.maxValue = maxValue;
      setMaxValueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public normalize_args(normalize_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBufferName()) {
        this.bufferName = other.bufferName;
      }
      this.minValue = other.minValue;
      this.maxValue = other.maxValue;
    }

    public normalize_args deepCopy() {
      return new normalize_args(this);
    }

    @Override
    public void clear() {
      this.bufferName = null;
      setMinValueIsSet(false);
      this.minValue = 0;
      setMaxValueIsSet(false);
      this.maxValue = 0;
    }

    /**
     * Buffer name
     */
    public String getBufferName() {
      return this.bufferName;
    }

    /**
     * Buffer name
     */
    public normalize_args setBufferName(String bufferName) {
      this.bufferName = bufferName;
      return this;
    }

    public void unsetBufferName() {
      this.bufferName = null;
    }

    /** Returns true if field bufferName is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferName() {
      return this.bufferName != null;
    }

    public void setBufferNameIsSet(boolean value) {
      if (!value) {
        this.bufferName = null;
      }
    }

    /**
     * Normalize from
     */
    public int getMinValue() {
      return this.minValue;
    }

    /**
     * Normalize from
     */
    public normalize_args setMinValue(int minValue) {
      this.minValue = minValue;
      setMinValueIsSet(true);
      return this;
    }

    public void unsetMinValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINVALUE_ISSET_ID);
    }

    /** Returns true if field minValue is set (has been assigned a value) and false otherwise */
    public boolean isSetMinValue() {
      return EncodingUtils.testBit(__isset_bitfield, __MINVALUE_ISSET_ID);
    }

    public void setMinValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINVALUE_ISSET_ID, value);
    }

    /**
     * Normalize to
     */
    public int getMaxValue() {
      return this.maxValue;
    }

    /**
     * Normalize to
     */
    public normalize_args setMaxValue(int maxValue) {
      this.maxValue = maxValue;
      setMaxValueIsSet(true);
      return this;
    }

    public void unsetMaxValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXVALUE_ISSET_ID);
    }

    /** Returns true if field maxValue is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxValue() {
      return EncodingUtils.testBit(__isset_bitfield, __MAXVALUE_ISSET_ID);
    }

    public void setMaxValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXVALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUFFER_NAME:
        if (value == null) {
          unsetBufferName();
        } else {
          setBufferName((String)value);
        }
        break;

      case MIN_VALUE:
        if (value == null) {
          unsetMinValue();
        } else {
          setMinValue((Integer)value);
        }
        break;

      case MAX_VALUE:
        if (value == null) {
          unsetMaxValue();
        } else {
          setMaxValue((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUFFER_NAME:
        return getBufferName();

      case MIN_VALUE:
        return Integer.valueOf(getMinValue());

      case MAX_VALUE:
        return Integer.valueOf(getMaxValue());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUFFER_NAME:
        return isSetBufferName();
      case MIN_VALUE:
        return isSetMinValue();
      case MAX_VALUE:
        return isSetMaxValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof normalize_args)
        return this.equals((normalize_args)that);
      return false;
    }

    public boolean equals(normalize_args that) {
      if (that == null)
        return false;

      boolean this_present_bufferName = true && this.isSetBufferName();
      boolean that_present_bufferName = true && that.isSetBufferName();
      if (this_present_bufferName || that_present_bufferName) {
        if (!(this_present_bufferName && that_present_bufferName))
          return false;
        if (!this.bufferName.equals(that.bufferName))
          return false;
      }

      boolean this_present_minValue = true;
      boolean that_present_minValue = true;
      if (this_present_minValue || that_present_minValue) {
        if (!(this_present_minValue && that_present_minValue))
          return false;
        if (this.minValue != that.minValue)
          return false;
      }

      boolean this_present_maxValue = true;
      boolean that_present_maxValue = true;
      if (this_present_maxValue || that_present_maxValue) {
        if (!(this_present_maxValue && that_present_maxValue))
          return false;
        if (this.maxValue != that.maxValue)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bufferName = true && (isSetBufferName());
      list.add(present_bufferName);
      if (present_bufferName)
        list.add(bufferName);

      boolean present_minValue = true;
      list.add(present_minValue);
      if (present_minValue)
        list.add(minValue);

      boolean present_maxValue = true;
      list.add(present_maxValue);
      if (present_maxValue)
        list.add(maxValue);

      return list.hashCode();
    }

    @Override
    public int compareTo(normalize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBufferName()).compareTo(other.isSetBufferName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferName, other.bufferName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMinValue()).compareTo(other.isSetMinValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMinValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minValue, other.minValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxValue()).compareTo(other.isSetMaxValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxValue, other.maxValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("normalize_args(");
      boolean first = true;

      sb.append("bufferName:");
      if (this.bufferName == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("minValue:");
      sb.append(this.minValue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxValue:");
      sb.append(this.maxValue);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class normalize_argsStandardSchemeFactory implements SchemeFactory {
      public normalize_argsStandardScheme getScheme() {
        return new normalize_argsStandardScheme();
      }
    }

    private static class normalize_argsStandardScheme extends StandardScheme<normalize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, normalize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFFER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferName = iprot.readString();
                struct.setBufferNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MIN_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.minValue = iprot.readI32();
                struct.setMinValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MAX_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maxValue = iprot.readI32();
                struct.setMaxValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, normalize_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bufferName != null) {
          oprot.writeFieldBegin(BUFFER_NAME_FIELD_DESC);
          oprot.writeString(struct.bufferName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MIN_VALUE_FIELD_DESC);
        oprot.writeI32(struct.minValue);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_VALUE_FIELD_DESC);
        oprot.writeI32(struct.maxValue);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class normalize_argsTupleSchemeFactory implements SchemeFactory {
      public normalize_argsTupleScheme getScheme() {
        return new normalize_argsTupleScheme();
      }
    }

    private static class normalize_argsTupleScheme extends TupleScheme<normalize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, normalize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBufferName()) {
          optionals.set(0);
        }
        if (struct.isSetMinValue()) {
          optionals.set(1);
        }
        if (struct.isSetMaxValue()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBufferName()) {
          oprot.writeString(struct.bufferName);
        }
        if (struct.isSetMinValue()) {
          oprot.writeI32(struct.minValue);
        }
        if (struct.isSetMaxValue()) {
          oprot.writeI32(struct.maxValue);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, normalize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bufferName = iprot.readString();
          struct.setBufferNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.minValue = iprot.readI32();
          struct.setMinValueIsSet(true);
        }
        if (incoming.get(2)) {
          struct.maxValue = iprot.readI32();
          struct.setMaxValueIsSet(true);
        }
      }
    }

  }

  public static class normalize_result implements org.apache.thrift.TBase<normalize_result, normalize_result._Fields>, java.io.Serializable, Cloneable, Comparable<normalize_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("normalize_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new normalize_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new normalize_resultTupleSchemeFactory());
    }

    public String success; // required
    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(normalize_result.class, metaDataMap);
    }

    public normalize_result() {
    }

    public normalize_result(
      String success,
      emException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public normalize_result(normalize_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public normalize_result deepCopy() {
      return new normalize_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public normalize_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public emException getErr() {
      return this.err;
    }

    public normalize_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof normalize_result)
        return this.equals((normalize_result)that);
      return false;
    }

    public boolean equals(normalize_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(normalize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("normalize_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class normalize_resultStandardSchemeFactory implements SchemeFactory {
      public normalize_resultStandardScheme getScheme() {
        return new normalize_resultStandardScheme();
      }
    }

    private static class normalize_resultStandardScheme extends StandardScheme<normalize_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, normalize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, normalize_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class normalize_resultTupleSchemeFactory implements SchemeFactory {
      public normalize_resultTupleScheme getScheme() {
        return new normalize_resultTupleScheme();
      }
    }

    private static class normalize_resultTupleScheme extends TupleScheme<normalize_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, normalize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, normalize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class quantize_args implements org.apache.thrift.TBase<quantize_args, quantize_args._Fields>, java.io.Serializable, Cloneable, Comparable<quantize_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("quantize_args");

    private static final org.apache.thrift.protocol.TField BUFFER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MIN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("minValue", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MAX_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxValue", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LEVELS_FIELD_DESC = new org.apache.thrift.protocol.TField("levels", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new quantize_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new quantize_argsTupleSchemeFactory());
    }

    /**
     * Buffer name
     */
    public String bufferName; // required
    /**
     * Normalize from
     */
    public int minValue; // required
    /**
     * Normalize to
     */
    public int maxValue; // required
    /**
     * How many discrete levels to quantize to
     */
    public int levels; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Buffer name
       */
      BUFFER_NAME((short)1, "bufferName"),
      /**
       * Normalize from
       */
      MIN_VALUE((short)2, "minValue"),
      /**
       * Normalize to
       */
      MAX_VALUE((short)3, "maxValue"),
      /**
       * How many discrete levels to quantize to
       */
      LEVELS((short)4, "levels");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUFFER_NAME
            return BUFFER_NAME;
          case 2: // MIN_VALUE
            return MIN_VALUE;
          case 3: // MAX_VALUE
            return MAX_VALUE;
          case 4: // LEVELS
            return LEVELS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MINVALUE_ISSET_ID = 0;
    private static final int __MAXVALUE_ISSET_ID = 1;
    private static final int __LEVELS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUFFER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bufferName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MIN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("minValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MAX_VALUE, new org.apache.thrift.meta_data.FieldMetaData("maxValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LEVELS, new org.apache.thrift.meta_data.FieldMetaData("levels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(quantize_args.class, metaDataMap);
    }

    public quantize_args() {
    }

    public quantize_args(
      String bufferName,
      int minValue,
      int maxValue,
      int levels)
    {
      this();
      this.bufferName = bufferName;
      this.minValue = minValue;
      setMinValueIsSet(true);
      this.maxValue = maxValue;
      setMaxValueIsSet(true);
      this.levels = levels;
      setLevelsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public quantize_args(quantize_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBufferName()) {
        this.bufferName = other.bufferName;
      }
      this.minValue = other.minValue;
      this.maxValue = other.maxValue;
      this.levels = other.levels;
    }

    public quantize_args deepCopy() {
      return new quantize_args(this);
    }

    @Override
    public void clear() {
      this.bufferName = null;
      setMinValueIsSet(false);
      this.minValue = 0;
      setMaxValueIsSet(false);
      this.maxValue = 0;
      setLevelsIsSet(false);
      this.levels = 0;
    }

    /**
     * Buffer name
     */
    public String getBufferName() {
      return this.bufferName;
    }

    /**
     * Buffer name
     */
    public quantize_args setBufferName(String bufferName) {
      this.bufferName = bufferName;
      return this;
    }

    public void unsetBufferName() {
      this.bufferName = null;
    }

    /** Returns true if field bufferName is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferName() {
      return this.bufferName != null;
    }

    public void setBufferNameIsSet(boolean value) {
      if (!value) {
        this.bufferName = null;
      }
    }

    /**
     * Normalize from
     */
    public int getMinValue() {
      return this.minValue;
    }

    /**
     * Normalize from
     */
    public quantize_args setMinValue(int minValue) {
      this.minValue = minValue;
      setMinValueIsSet(true);
      return this;
    }

    public void unsetMinValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINVALUE_ISSET_ID);
    }

    /** Returns true if field minValue is set (has been assigned a value) and false otherwise */
    public boolean isSetMinValue() {
      return EncodingUtils.testBit(__isset_bitfield, __MINVALUE_ISSET_ID);
    }

    public void setMinValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINVALUE_ISSET_ID, value);
    }

    /**
     * Normalize to
     */
    public int getMaxValue() {
      return this.maxValue;
    }

    /**
     * Normalize to
     */
    public quantize_args setMaxValue(int maxValue) {
      this.maxValue = maxValue;
      setMaxValueIsSet(true);
      return this;
    }

    public void unsetMaxValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXVALUE_ISSET_ID);
    }

    /** Returns true if field maxValue is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxValue() {
      return EncodingUtils.testBit(__isset_bitfield, __MAXVALUE_ISSET_ID);
    }

    public void setMaxValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXVALUE_ISSET_ID, value);
    }

    /**
     * How many discrete levels to quantize to
     */
    public int getLevels() {
      return this.levels;
    }

    /**
     * How many discrete levels to quantize to
     */
    public quantize_args setLevels(int levels) {
      this.levels = levels;
      setLevelsIsSet(true);
      return this;
    }

    public void unsetLevels() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVELS_ISSET_ID);
    }

    /** Returns true if field levels is set (has been assigned a value) and false otherwise */
    public boolean isSetLevels() {
      return EncodingUtils.testBit(__isset_bitfield, __LEVELS_ISSET_ID);
    }

    public void setLevelsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVELS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUFFER_NAME:
        if (value == null) {
          unsetBufferName();
        } else {
          setBufferName((String)value);
        }
        break;

      case MIN_VALUE:
        if (value == null) {
          unsetMinValue();
        } else {
          setMinValue((Integer)value);
        }
        break;

      case MAX_VALUE:
        if (value == null) {
          unsetMaxValue();
        } else {
          setMaxValue((Integer)value);
        }
        break;

      case LEVELS:
        if (value == null) {
          unsetLevels();
        } else {
          setLevels((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUFFER_NAME:
        return getBufferName();

      case MIN_VALUE:
        return Integer.valueOf(getMinValue());

      case MAX_VALUE:
        return Integer.valueOf(getMaxValue());

      case LEVELS:
        return Integer.valueOf(getLevels());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUFFER_NAME:
        return isSetBufferName();
      case MIN_VALUE:
        return isSetMinValue();
      case MAX_VALUE:
        return isSetMaxValue();
      case LEVELS:
        return isSetLevels();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof quantize_args)
        return this.equals((quantize_args)that);
      return false;
    }

    public boolean equals(quantize_args that) {
      if (that == null)
        return false;

      boolean this_present_bufferName = true && this.isSetBufferName();
      boolean that_present_bufferName = true && that.isSetBufferName();
      if (this_present_bufferName || that_present_bufferName) {
        if (!(this_present_bufferName && that_present_bufferName))
          return false;
        if (!this.bufferName.equals(that.bufferName))
          return false;
      }

      boolean this_present_minValue = true;
      boolean that_present_minValue = true;
      if (this_present_minValue || that_present_minValue) {
        if (!(this_present_minValue && that_present_minValue))
          return false;
        if (this.minValue != that.minValue)
          return false;
      }

      boolean this_present_maxValue = true;
      boolean that_present_maxValue = true;
      if (this_present_maxValue || that_present_maxValue) {
        if (!(this_present_maxValue && that_present_maxValue))
          return false;
        if (this.maxValue != that.maxValue)
          return false;
      }

      boolean this_present_levels = true;
      boolean that_present_levels = true;
      if (this_present_levels || that_present_levels) {
        if (!(this_present_levels && that_present_levels))
          return false;
        if (this.levels != that.levels)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bufferName = true && (isSetBufferName());
      list.add(present_bufferName);
      if (present_bufferName)
        list.add(bufferName);

      boolean present_minValue = true;
      list.add(present_minValue);
      if (present_minValue)
        list.add(minValue);

      boolean present_maxValue = true;
      list.add(present_maxValue);
      if (present_maxValue)
        list.add(maxValue);

      boolean present_levels = true;
      list.add(present_levels);
      if (present_levels)
        list.add(levels);

      return list.hashCode();
    }

    @Override
    public int compareTo(quantize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBufferName()).compareTo(other.isSetBufferName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferName, other.bufferName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMinValue()).compareTo(other.isSetMinValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMinValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minValue, other.minValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxValue()).compareTo(other.isSetMaxValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxValue, other.maxValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLevels()).compareTo(other.isSetLevels());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLevels()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levels, other.levels);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("quantize_args(");
      boolean first = true;

      sb.append("bufferName:");
      if (this.bufferName == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("minValue:");
      sb.append(this.minValue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxValue:");
      sb.append(this.maxValue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("levels:");
      sb.append(this.levels);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class quantize_argsStandardSchemeFactory implements SchemeFactory {
      public quantize_argsStandardScheme getScheme() {
        return new quantize_argsStandardScheme();
      }
    }

    private static class quantize_argsStandardScheme extends StandardScheme<quantize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, quantize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFFER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferName = iprot.readString();
                struct.setBufferNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MIN_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.minValue = iprot.readI32();
                struct.setMinValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MAX_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maxValue = iprot.readI32();
                struct.setMaxValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LEVELS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.levels = iprot.readI32();
                struct.setLevelsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, quantize_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bufferName != null) {
          oprot.writeFieldBegin(BUFFER_NAME_FIELD_DESC);
          oprot.writeString(struct.bufferName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MIN_VALUE_FIELD_DESC);
        oprot.writeI32(struct.minValue);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_VALUE_FIELD_DESC);
        oprot.writeI32(struct.maxValue);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LEVELS_FIELD_DESC);
        oprot.writeI32(struct.levels);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class quantize_argsTupleSchemeFactory implements SchemeFactory {
      public quantize_argsTupleScheme getScheme() {
        return new quantize_argsTupleScheme();
      }
    }

    private static class quantize_argsTupleScheme extends TupleScheme<quantize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, quantize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBufferName()) {
          optionals.set(0);
        }
        if (struct.isSetMinValue()) {
          optionals.set(1);
        }
        if (struct.isSetMaxValue()) {
          optionals.set(2);
        }
        if (struct.isSetLevels()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBufferName()) {
          oprot.writeString(struct.bufferName);
        }
        if (struct.isSetMinValue()) {
          oprot.writeI32(struct.minValue);
        }
        if (struct.isSetMaxValue()) {
          oprot.writeI32(struct.maxValue);
        }
        if (struct.isSetLevels()) {
          oprot.writeI32(struct.levels);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, quantize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bufferName = iprot.readString();
          struct.setBufferNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.minValue = iprot.readI32();
          struct.setMinValueIsSet(true);
        }
        if (incoming.get(2)) {
          struct.maxValue = iprot.readI32();
          struct.setMaxValueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.levels = iprot.readI32();
          struct.setLevelsIsSet(true);
        }
      }
    }

  }

  public static class quantize_result implements org.apache.thrift.TBase<quantize_result, quantize_result._Fields>, java.io.Serializable, Cloneable, Comparable<quantize_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("quantize_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new quantize_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new quantize_resultTupleSchemeFactory());
    }

    public String success; // required
    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(quantize_result.class, metaDataMap);
    }

    public quantize_result() {
    }

    public quantize_result(
      String success,
      emException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public quantize_result(quantize_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public quantize_result deepCopy() {
      return new quantize_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public quantize_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public emException getErr() {
      return this.err;
    }

    public quantize_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof quantize_result)
        return this.equals((quantize_result)that);
      return false;
    }

    public boolean equals(quantize_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(quantize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("quantize_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class quantize_resultStandardSchemeFactory implements SchemeFactory {
      public quantize_resultStandardScheme getScheme() {
        return new quantize_resultStandardScheme();
      }
    }

    private static class quantize_resultStandardScheme extends StandardScheme<quantize_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, quantize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, quantize_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class quantize_resultTupleSchemeFactory implements SchemeFactory {
      public quantize_resultTupleScheme getScheme() {
        return new quantize_resultTupleScheme();
      }
    }

    private static class quantize_resultTupleScheme extends TupleScheme<quantize_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, quantize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, quantize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class resample_args implements org.apache.thrift.TBase<resample_args, resample_args._Fields>, java.io.Serializable, Cloneable, Comparable<resample_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resample_args");

    private static final org.apache.thrift.protocol.TField BUFFER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("newLength", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resample_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resample_argsTupleSchemeFactory());
    }

    /**
     * Buffer name
     */
    public String bufferName; // required
    /**
     * Number of samples in returned buffer
     */
    public int newLength; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Buffer name
       */
      BUFFER_NAME((short)1, "bufferName"),
      /**
       * Number of samples in returned buffer
       */
      NEW_LENGTH((short)2, "newLength");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUFFER_NAME
            return BUFFER_NAME;
          case 2: // NEW_LENGTH
            return NEW_LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NEWLENGTH_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUFFER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bufferName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("newLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resample_args.class, metaDataMap);
    }

    public resample_args() {
    }

    public resample_args(
      String bufferName,
      int newLength)
    {
      this();
      this.bufferName = bufferName;
      this.newLength = newLength;
      setNewLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resample_args(resample_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBufferName()) {
        this.bufferName = other.bufferName;
      }
      this.newLength = other.newLength;
    }

    public resample_args deepCopy() {
      return new resample_args(this);
    }

    @Override
    public void clear() {
      this.bufferName = null;
      setNewLengthIsSet(false);
      this.newLength = 0;
    }

    /**
     * Buffer name
     */
    public String getBufferName() {
      return this.bufferName;
    }

    /**
     * Buffer name
     */
    public resample_args setBufferName(String bufferName) {
      this.bufferName = bufferName;
      return this;
    }

    public void unsetBufferName() {
      this.bufferName = null;
    }

    /** Returns true if field bufferName is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferName() {
      return this.bufferName != null;
    }

    public void setBufferNameIsSet(boolean value) {
      if (!value) {
        this.bufferName = null;
      }
    }

    /**
     * Number of samples in returned buffer
     */
    public int getNewLength() {
      return this.newLength;
    }

    /**
     * Number of samples in returned buffer
     */
    public resample_args setNewLength(int newLength) {
      this.newLength = newLength;
      setNewLengthIsSet(true);
      return this;
    }

    public void unsetNewLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWLENGTH_ISSET_ID);
    }

    /** Returns true if field newLength is set (has been assigned a value) and false otherwise */
    public boolean isSetNewLength() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWLENGTH_ISSET_ID);
    }

    public void setNewLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWLENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUFFER_NAME:
        if (value == null) {
          unsetBufferName();
        } else {
          setBufferName((String)value);
        }
        break;

      case NEW_LENGTH:
        if (value == null) {
          unsetNewLength();
        } else {
          setNewLength((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUFFER_NAME:
        return getBufferName();

      case NEW_LENGTH:
        return Integer.valueOf(getNewLength());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUFFER_NAME:
        return isSetBufferName();
      case NEW_LENGTH:
        return isSetNewLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resample_args)
        return this.equals((resample_args)that);
      return false;
    }

    public boolean equals(resample_args that) {
      if (that == null)
        return false;

      boolean this_present_bufferName = true && this.isSetBufferName();
      boolean that_present_bufferName = true && that.isSetBufferName();
      if (this_present_bufferName || that_present_bufferName) {
        if (!(this_present_bufferName && that_present_bufferName))
          return false;
        if (!this.bufferName.equals(that.bufferName))
          return false;
      }

      boolean this_present_newLength = true;
      boolean that_present_newLength = true;
      if (this_present_newLength || that_present_newLength) {
        if (!(this_present_newLength && that_present_newLength))
          return false;
        if (this.newLength != that.newLength)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bufferName = true && (isSetBufferName());
      list.add(present_bufferName);
      if (present_bufferName)
        list.add(bufferName);

      boolean present_newLength = true;
      list.add(present_newLength);
      if (present_newLength)
        list.add(newLength);

      return list.hashCode();
    }

    @Override
    public int compareTo(resample_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBufferName()).compareTo(other.isSetBufferName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferName, other.bufferName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewLength()).compareTo(other.isSetNewLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newLength, other.newLength);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resample_args(");
      boolean first = true;

      sb.append("bufferName:");
      if (this.bufferName == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newLength:");
      sb.append(this.newLength);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resample_argsStandardSchemeFactory implements SchemeFactory {
      public resample_argsStandardScheme getScheme() {
        return new resample_argsStandardScheme();
      }
    }

    private static class resample_argsStandardScheme extends StandardScheme<resample_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resample_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFFER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferName = iprot.readString();
                struct.setBufferNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newLength = iprot.readI32();
                struct.setNewLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resample_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bufferName != null) {
          oprot.writeFieldBegin(BUFFER_NAME_FIELD_DESC);
          oprot.writeString(struct.bufferName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NEW_LENGTH_FIELD_DESC);
        oprot.writeI32(struct.newLength);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resample_argsTupleSchemeFactory implements SchemeFactory {
      public resample_argsTupleScheme getScheme() {
        return new resample_argsTupleScheme();
      }
    }

    private static class resample_argsTupleScheme extends TupleScheme<resample_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resample_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBufferName()) {
          optionals.set(0);
        }
        if (struct.isSetNewLength()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBufferName()) {
          oprot.writeString(struct.bufferName);
        }
        if (struct.isSetNewLength()) {
          oprot.writeI32(struct.newLength);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resample_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bufferName = iprot.readString();
          struct.setBufferNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newLength = iprot.readI32();
          struct.setNewLengthIsSet(true);
        }
      }
    }

  }

  public static class resample_result implements org.apache.thrift.TBase<resample_result, resample_result._Fields>, java.io.Serializable, Cloneable, Comparable<resample_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resample_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resample_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resample_resultTupleSchemeFactory());
    }

    public String success; // required
    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resample_result.class, metaDataMap);
    }

    public resample_result() {
    }

    public resample_result(
      String success,
      emException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resample_result(resample_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public resample_result deepCopy() {
      return new resample_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public resample_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public emException getErr() {
      return this.err;
    }

    public resample_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resample_result)
        return this.equals((resample_result)that);
      return false;
    }

    public boolean equals(resample_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(resample_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resample_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resample_resultStandardSchemeFactory implements SchemeFactory {
      public resample_resultStandardScheme getScheme() {
        return new resample_resultStandardScheme();
      }
    }

    private static class resample_resultStandardScheme extends StandardScheme<resample_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resample_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resample_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resample_resultTupleSchemeFactory implements SchemeFactory {
      public resample_resultTupleScheme getScheme() {
        return new resample_resultTupleScheme();
      }
    }

    private static class resample_resultTupleScheme extends TupleScheme<resample_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resample_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resample_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class medianFilter_args implements org.apache.thrift.TBase<medianFilter_args, medianFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<medianFilter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("medianFilter_args");

    private static final org.apache.thrift.protocol.TField BUFFER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FITLER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fitlerSize", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new medianFilter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new medianFilter_argsTupleSchemeFactory());
    }

    /**
     * Buffer name
     */
    public String bufferName; // required
    /**
     * Strength of the filter. Larger number is stronger. Must be >=1
     */
    public int fitlerSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * Buffer name
       */
      BUFFER_NAME((short)1, "bufferName"),
      /**
       * Strength of the filter. Larger number is stronger. Must be >=1
       */
      FITLER_SIZE((short)2, "fitlerSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUFFER_NAME
            return BUFFER_NAME;
          case 2: // FITLER_SIZE
            return FITLER_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FITLERSIZE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUFFER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bufferName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FITLER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fitlerSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(medianFilter_args.class, metaDataMap);
    }

    public medianFilter_args() {
    }

    public medianFilter_args(
      String bufferName,
      int fitlerSize)
    {
      this();
      this.bufferName = bufferName;
      this.fitlerSize = fitlerSize;
      setFitlerSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public medianFilter_args(medianFilter_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBufferName()) {
        this.bufferName = other.bufferName;
      }
      this.fitlerSize = other.fitlerSize;
    }

    public medianFilter_args deepCopy() {
      return new medianFilter_args(this);
    }

    @Override
    public void clear() {
      this.bufferName = null;
      setFitlerSizeIsSet(false);
      this.fitlerSize = 0;
    }

    /**
     * Buffer name
     */
    public String getBufferName() {
      return this.bufferName;
    }

    /**
     * Buffer name
     */
    public medianFilter_args setBufferName(String bufferName) {
      this.bufferName = bufferName;
      return this;
    }

    public void unsetBufferName() {
      this.bufferName = null;
    }

    /** Returns true if field bufferName is set (has been assigned a value) and false otherwise */
    public boolean isSetBufferName() {
      return this.bufferName != null;
    }

    public void setBufferNameIsSet(boolean value) {
      if (!value) {
        this.bufferName = null;
      }
    }

    /**
     * Strength of the filter. Larger number is stronger. Must be >=1
     */
    public int getFitlerSize() {
      return this.fitlerSize;
    }

    /**
     * Strength of the filter. Larger number is stronger. Must be >=1
     */
    public medianFilter_args setFitlerSize(int fitlerSize) {
      this.fitlerSize = fitlerSize;
      setFitlerSizeIsSet(true);
      return this;
    }

    public void unsetFitlerSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FITLERSIZE_ISSET_ID);
    }

    /** Returns true if field fitlerSize is set (has been assigned a value) and false otherwise */
    public boolean isSetFitlerSize() {
      return EncodingUtils.testBit(__isset_bitfield, __FITLERSIZE_ISSET_ID);
    }

    public void setFitlerSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FITLERSIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUFFER_NAME:
        if (value == null) {
          unsetBufferName();
        } else {
          setBufferName((String)value);
        }
        break;

      case FITLER_SIZE:
        if (value == null) {
          unsetFitlerSize();
        } else {
          setFitlerSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUFFER_NAME:
        return getBufferName();

      case FITLER_SIZE:
        return Integer.valueOf(getFitlerSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUFFER_NAME:
        return isSetBufferName();
      case FITLER_SIZE:
        return isSetFitlerSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof medianFilter_args)
        return this.equals((medianFilter_args)that);
      return false;
    }

    public boolean equals(medianFilter_args that) {
      if (that == null)
        return false;

      boolean this_present_bufferName = true && this.isSetBufferName();
      boolean that_present_bufferName = true && that.isSetBufferName();
      if (this_present_bufferName || that_present_bufferName) {
        if (!(this_present_bufferName && that_present_bufferName))
          return false;
        if (!this.bufferName.equals(that.bufferName))
          return false;
      }

      boolean this_present_fitlerSize = true;
      boolean that_present_fitlerSize = true;
      if (this_present_fitlerSize || that_present_fitlerSize) {
        if (!(this_present_fitlerSize && that_present_fitlerSize))
          return false;
        if (this.fitlerSize != that.fitlerSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bufferName = true && (isSetBufferName());
      list.add(present_bufferName);
      if (present_bufferName)
        list.add(bufferName);

      boolean present_fitlerSize = true;
      list.add(present_fitlerSize);
      if (present_fitlerSize)
        list.add(fitlerSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(medianFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBufferName()).compareTo(other.isSetBufferName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBufferName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferName, other.bufferName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFitlerSize()).compareTo(other.isSetFitlerSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFitlerSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fitlerSize, other.fitlerSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("medianFilter_args(");
      boolean first = true;

      sb.append("bufferName:");
      if (this.bufferName == null) {
        sb.append("null");
      } else {
        sb.append(this.bufferName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fitlerSize:");
      sb.append(this.fitlerSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class medianFilter_argsStandardSchemeFactory implements SchemeFactory {
      public medianFilter_argsStandardScheme getScheme() {
        return new medianFilter_argsStandardScheme();
      }
    }

    private static class medianFilter_argsStandardScheme extends StandardScheme<medianFilter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, medianFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUFFER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bufferName = iprot.readString();
                struct.setBufferNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FITLER_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fitlerSize = iprot.readI32();
                struct.setFitlerSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, medianFilter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bufferName != null) {
          oprot.writeFieldBegin(BUFFER_NAME_FIELD_DESC);
          oprot.writeString(struct.bufferName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FITLER_SIZE_FIELD_DESC);
        oprot.writeI32(struct.fitlerSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class medianFilter_argsTupleSchemeFactory implements SchemeFactory {
      public medianFilter_argsTupleScheme getScheme() {
        return new medianFilter_argsTupleScheme();
      }
    }

    private static class medianFilter_argsTupleScheme extends TupleScheme<medianFilter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, medianFilter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBufferName()) {
          optionals.set(0);
        }
        if (struct.isSetFitlerSize()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBufferName()) {
          oprot.writeString(struct.bufferName);
        }
        if (struct.isSetFitlerSize()) {
          oprot.writeI32(struct.fitlerSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, medianFilter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bufferName = iprot.readString();
          struct.setBufferNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fitlerSize = iprot.readI32();
          struct.setFitlerSizeIsSet(true);
        }
      }
    }

  }

  public static class medianFilter_result implements org.apache.thrift.TBase<medianFilter_result, medianFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<medianFilter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("medianFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new medianFilter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new medianFilter_resultTupleSchemeFactory());
    }

    public String success; // required
    public emException err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(medianFilter_result.class, metaDataMap);
    }

    public medianFilter_result() {
    }

    public medianFilter_result(
      String success,
      emException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public medianFilter_result(medianFilter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetErr()) {
        this.err = new emException(other.err);
      }
    }

    public medianFilter_result deepCopy() {
      return new medianFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public medianFilter_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public emException getErr() {
      return this.err;
    }

    public medianFilter_result setErr(emException err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((emException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof medianFilter_result)
        return this.equals((medianFilter_result)that);
      return false;
    }

    public boolean equals(medianFilter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_err = true && (isSetErr());
      list.add(present_err);
      if (present_err)
        list.add(err);

      return list.hashCode();
    }

    @Override
    public int compareTo(medianFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("medianFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class medianFilter_resultStandardSchemeFactory implements SchemeFactory {
      public medianFilter_resultStandardScheme getScheme() {
        return new medianFilter_resultStandardScheme();
      }
    }

    private static class medianFilter_resultStandardScheme extends StandardScheme<medianFilter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, medianFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new emException();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, medianFilter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class medianFilter_resultTupleSchemeFactory implements SchemeFactory {
      public medianFilter_resultTupleScheme getScheme() {
        return new medianFilter_resultTupleScheme();
      }
    }

    private static class medianFilter_resultTupleScheme extends TupleScheme<medianFilter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, medianFilter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, medianFilter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new emException();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

}
