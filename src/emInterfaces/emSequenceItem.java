/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package emInterfaces;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Definition of an operation to be performed. Not all parameters may be used. It will depend on the operationType. If something can't be performed by the EM, exceptions should be thrown when adding to the buffers. Timings are defined by FPGA ticks, which will need to be converted to Hz.
 */
public class emSequenceItem implements org.apache.thrift.TBase<emSequenceItem, emSequenceItem._Fields>, java.io.Serializable, Cloneable, Comparable<emSequenceItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("emSequenceItem");

  private static final org.apache.thrift.protocol.TField OPERATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operationType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PIN_FIELD_DESC = new org.apache.thrift.protocol.TField("pin", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField FREQUENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("frequency", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("phase", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CYCLE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cycleTime", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField AMPLITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("amplitude", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField WAVE_FORM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("waveFormType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField WAVE_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("waveForm", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField WAIT_FOR_TRIGGER_FIELD_DESC = new org.apache.thrift.protocol.TField("waitForTrigger", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new emSequenceItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new emSequenceItemTupleSchemeFactory());
  }

  /**
   * What the action is
   * 
   * @see emSequenceOperationType
   */
  public emSequenceOperationType operationType; // required
  /**
   * Where the action is applied to (FPGA pin)
   */
  public int pin; // required
  /**
   * Ticks it should start at
   */
  public long startTime; // required
  /**
   * Ticks it should end at
   */
  public long endTime; // required
  /**
   * Definition of signal, if appropriate
   */
  public int frequency; // required
  public int phase; // required
  public int cycleTime; // required
  public int amplitude; // required
  /**
   * Predefined wave form, eg. square, sawtooth, sine
   * 
   * @see emWaveFormType
   */
  public emWaveFormType waveFormType; // required
  /**
   * If playing back an arbitrary signal, buffer is attached here
   */
  public emWaveForm waveForm; // required
  /**
   * If >=0 wait for a trigger on certain pin before running
   */
  public int waitForTrigger; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * What the action is
     * 
     * @see emSequenceOperationType
     */
    OPERATION_TYPE((short)1, "operationType"),
    /**
     * Where the action is applied to (FPGA pin)
     */
    PIN((short)2, "pin"),
    /**
     * Ticks it should start at
     */
    START_TIME((short)3, "startTime"),
    /**
     * Ticks it should end at
     */
    END_TIME((short)4, "endTime"),
    /**
     * Definition of signal, if appropriate
     */
    FREQUENCY((short)5, "frequency"),
    PHASE((short)6, "phase"),
    CYCLE_TIME((short)7, "cycleTime"),
    AMPLITUDE((short)8, "amplitude"),
    /**
     * Predefined wave form, eg. square, sawtooth, sine
     * 
     * @see emWaveFormType
     */
    WAVE_FORM_TYPE((short)9, "waveFormType"),
    /**
     * If playing back an arbitrary signal, buffer is attached here
     */
    WAVE_FORM((short)10, "waveForm"),
    /**
     * If >=0 wait for a trigger on certain pin before running
     */
    WAIT_FOR_TRIGGER((short)11, "waitForTrigger");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERATION_TYPE
          return OPERATION_TYPE;
        case 2: // PIN
          return PIN;
        case 3: // START_TIME
          return START_TIME;
        case 4: // END_TIME
          return END_TIME;
        case 5: // FREQUENCY
          return FREQUENCY;
        case 6: // PHASE
          return PHASE;
        case 7: // CYCLE_TIME
          return CYCLE_TIME;
        case 8: // AMPLITUDE
          return AMPLITUDE;
        case 9: // WAVE_FORM_TYPE
          return WAVE_FORM_TYPE;
        case 10: // WAVE_FORM
          return WAVE_FORM;
        case 11: // WAIT_FOR_TRIGGER
          return WAIT_FOR_TRIGGER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PIN_ISSET_ID = 0;
  private static final int __STARTTIME_ISSET_ID = 1;
  private static final int __ENDTIME_ISSET_ID = 2;
  private static final int __FREQUENCY_ISSET_ID = 3;
  private static final int __PHASE_ISSET_ID = 4;
  private static final int __CYCLETIME_ISSET_ID = 5;
  private static final int __AMPLITUDE_ISSET_ID = 6;
  private static final int __WAITFORTRIGGER_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, emSequenceOperationType.class)));
    tmpMap.put(_Fields.PIN, new org.apache.thrift.meta_data.FieldMetaData("pin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FREQUENCY, new org.apache.thrift.meta_data.FieldMetaData("frequency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PHASE, new org.apache.thrift.meta_data.FieldMetaData("phase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CYCLE_TIME, new org.apache.thrift.meta_data.FieldMetaData("cycleTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AMPLITUDE, new org.apache.thrift.meta_data.FieldMetaData("amplitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WAVE_FORM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("waveFormType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, emWaveFormType.class)));
    tmpMap.put(_Fields.WAVE_FORM, new org.apache.thrift.meta_data.FieldMetaData("waveForm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, emWaveForm.class)));
    tmpMap.put(_Fields.WAIT_FOR_TRIGGER, new org.apache.thrift.meta_data.FieldMetaData("waitForTrigger", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(emSequenceItem.class, metaDataMap);
  }

  public emSequenceItem() {
    this.frequency = 0;

    this.phase = 0;

    this.cycleTime = 0;

    this.amplitude = 0;

    this.waitForTrigger = -1;

  }

  public emSequenceItem(
    emSequenceOperationType operationType,
    int pin,
    long startTime,
    long endTime,
    int frequency,
    int phase,
    int cycleTime,
    int amplitude,
    emWaveFormType waveFormType,
    emWaveForm waveForm,
    int waitForTrigger)
  {
    this();
    this.operationType = operationType;
    this.pin = pin;
    setPinIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.frequency = frequency;
    setFrequencyIsSet(true);
    this.phase = phase;
    setPhaseIsSet(true);
    this.cycleTime = cycleTime;
    setCycleTimeIsSet(true);
    this.amplitude = amplitude;
    setAmplitudeIsSet(true);
    this.waveFormType = waveFormType;
    this.waveForm = waveForm;
    this.waitForTrigger = waitForTrigger;
    setWaitForTriggerIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public emSequenceItem(emSequenceItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOperationType()) {
      this.operationType = other.operationType;
    }
    this.pin = other.pin;
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    this.frequency = other.frequency;
    this.phase = other.phase;
    this.cycleTime = other.cycleTime;
    this.amplitude = other.amplitude;
    if (other.isSetWaveFormType()) {
      this.waveFormType = other.waveFormType;
    }
    if (other.isSetWaveForm()) {
      this.waveForm = new emWaveForm(other.waveForm);
    }
    this.waitForTrigger = other.waitForTrigger;
  }

  public emSequenceItem deepCopy() {
    return new emSequenceItem(this);
  }

  @Override
  public void clear() {
    this.operationType = null;
    setPinIsSet(false);
    this.pin = 0;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    this.frequency = 0;

    this.phase = 0;

    this.cycleTime = 0;

    this.amplitude = 0;

    this.waveFormType = null;
    this.waveForm = null;
    this.waitForTrigger = -1;

  }

  /**
   * What the action is
   * 
   * @see emSequenceOperationType
   */
  public emSequenceOperationType getOperationType() {
    return this.operationType;
  }

  /**
   * What the action is
   * 
   * @see emSequenceOperationType
   */
  public emSequenceItem setOperationType(emSequenceOperationType operationType) {
    this.operationType = operationType;
    return this;
  }

  public void unsetOperationType() {
    this.operationType = null;
  }

  /** Returns true if field operationType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationType() {
    return this.operationType != null;
  }

  public void setOperationTypeIsSet(boolean value) {
    if (!value) {
      this.operationType = null;
    }
  }

  /**
   * Where the action is applied to (FPGA pin)
   */
  public int getPin() {
    return this.pin;
  }

  /**
   * Where the action is applied to (FPGA pin)
   */
  public emSequenceItem setPin(int pin) {
    this.pin = pin;
    setPinIsSet(true);
    return this;
  }

  public void unsetPin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PIN_ISSET_ID);
  }

  /** Returns true if field pin is set (has been assigned a value) and false otherwise */
  public boolean isSetPin() {
    return EncodingUtils.testBit(__isset_bitfield, __PIN_ISSET_ID);
  }

  public void setPinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PIN_ISSET_ID, value);
  }

  /**
   * Ticks it should start at
   */
  public long getStartTime() {
    return this.startTime;
  }

  /**
   * Ticks it should start at
   */
  public emSequenceItem setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  /**
   * Ticks it should end at
   */
  public long getEndTime() {
    return this.endTime;
  }

  /**
   * Ticks it should end at
   */
  public emSequenceItem setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  /**
   * Definition of signal, if appropriate
   */
  public int getFrequency() {
    return this.frequency;
  }

  /**
   * Definition of signal, if appropriate
   */
  public emSequenceItem setFrequency(int frequency) {
    this.frequency = frequency;
    setFrequencyIsSet(true);
    return this;
  }

  public void unsetFrequency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREQUENCY_ISSET_ID);
  }

  /** Returns true if field frequency is set (has been assigned a value) and false otherwise */
  public boolean isSetFrequency() {
    return EncodingUtils.testBit(__isset_bitfield, __FREQUENCY_ISSET_ID);
  }

  public void setFrequencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREQUENCY_ISSET_ID, value);
  }

  public int getPhase() {
    return this.phase;
  }

  public emSequenceItem setPhase(int phase) {
    this.phase = phase;
    setPhaseIsSet(true);
    return this;
  }

  public void unsetPhase() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PHASE_ISSET_ID);
  }

  /** Returns true if field phase is set (has been assigned a value) and false otherwise */
  public boolean isSetPhase() {
    return EncodingUtils.testBit(__isset_bitfield, __PHASE_ISSET_ID);
  }

  public void setPhaseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PHASE_ISSET_ID, value);
  }

  public int getCycleTime() {
    return this.cycleTime;
  }

  public emSequenceItem setCycleTime(int cycleTime) {
    this.cycleTime = cycleTime;
    setCycleTimeIsSet(true);
    return this;
  }

  public void unsetCycleTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CYCLETIME_ISSET_ID);
  }

  /** Returns true if field cycleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCycleTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CYCLETIME_ISSET_ID);
  }

  public void setCycleTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CYCLETIME_ISSET_ID, value);
  }

  public int getAmplitude() {
    return this.amplitude;
  }

  public emSequenceItem setAmplitude(int amplitude) {
    this.amplitude = amplitude;
    setAmplitudeIsSet(true);
    return this;
  }

  public void unsetAmplitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMPLITUDE_ISSET_ID);
  }

  /** Returns true if field amplitude is set (has been assigned a value) and false otherwise */
  public boolean isSetAmplitude() {
    return EncodingUtils.testBit(__isset_bitfield, __AMPLITUDE_ISSET_ID);
  }

  public void setAmplitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMPLITUDE_ISSET_ID, value);
  }

  /**
   * Predefined wave form, eg. square, sawtooth, sine
   * 
   * @see emWaveFormType
   */
  public emWaveFormType getWaveFormType() {
    return this.waveFormType;
  }

  /**
   * Predefined wave form, eg. square, sawtooth, sine
   * 
   * @see emWaveFormType
   */
  public emSequenceItem setWaveFormType(emWaveFormType waveFormType) {
    this.waveFormType = waveFormType;
    return this;
  }

  public void unsetWaveFormType() {
    this.waveFormType = null;
  }

  /** Returns true if field waveFormType is set (has been assigned a value) and false otherwise */
  public boolean isSetWaveFormType() {
    return this.waveFormType != null;
  }

  public void setWaveFormTypeIsSet(boolean value) {
    if (!value) {
      this.waveFormType = null;
    }
  }

  /**
   * If playing back an arbitrary signal, buffer is attached here
   */
  public emWaveForm getWaveForm() {
    return this.waveForm;
  }

  /**
   * If playing back an arbitrary signal, buffer is attached here
   */
  public emSequenceItem setWaveForm(emWaveForm waveForm) {
    this.waveForm = waveForm;
    return this;
  }

  public void unsetWaveForm() {
    this.waveForm = null;
  }

  /** Returns true if field waveForm is set (has been assigned a value) and false otherwise */
  public boolean isSetWaveForm() {
    return this.waveForm != null;
  }

  public void setWaveFormIsSet(boolean value) {
    if (!value) {
      this.waveForm = null;
    }
  }

  /**
   * If >=0 wait for a trigger on certain pin before running
   */
  public int getWaitForTrigger() {
    return this.waitForTrigger;
  }

  /**
   * If >=0 wait for a trigger on certain pin before running
   */
  public emSequenceItem setWaitForTrigger(int waitForTrigger) {
    this.waitForTrigger = waitForTrigger;
    setWaitForTriggerIsSet(true);
    return this;
  }

  public void unsetWaitForTrigger() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WAITFORTRIGGER_ISSET_ID);
  }

  /** Returns true if field waitForTrigger is set (has been assigned a value) and false otherwise */
  public boolean isSetWaitForTrigger() {
    return EncodingUtils.testBit(__isset_bitfield, __WAITFORTRIGGER_ISSET_ID);
  }

  public void setWaitForTriggerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WAITFORTRIGGER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPERATION_TYPE:
      if (value == null) {
        unsetOperationType();
      } else {
        setOperationType((emSequenceOperationType)value);
      }
      break;

    case PIN:
      if (value == null) {
        unsetPin();
      } else {
        setPin((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case FREQUENCY:
      if (value == null) {
        unsetFrequency();
      } else {
        setFrequency((Integer)value);
      }
      break;

    case PHASE:
      if (value == null) {
        unsetPhase();
      } else {
        setPhase((Integer)value);
      }
      break;

    case CYCLE_TIME:
      if (value == null) {
        unsetCycleTime();
      } else {
        setCycleTime((Integer)value);
      }
      break;

    case AMPLITUDE:
      if (value == null) {
        unsetAmplitude();
      } else {
        setAmplitude((Integer)value);
      }
      break;

    case WAVE_FORM_TYPE:
      if (value == null) {
        unsetWaveFormType();
      } else {
        setWaveFormType((emWaveFormType)value);
      }
      break;

    case WAVE_FORM:
      if (value == null) {
        unsetWaveForm();
      } else {
        setWaveForm((emWaveForm)value);
      }
      break;

    case WAIT_FOR_TRIGGER:
      if (value == null) {
        unsetWaitForTrigger();
      } else {
        setWaitForTrigger((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERATION_TYPE:
      return getOperationType();

    case PIN:
      return Integer.valueOf(getPin());

    case START_TIME:
      return Long.valueOf(getStartTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case FREQUENCY:
      return Integer.valueOf(getFrequency());

    case PHASE:
      return Integer.valueOf(getPhase());

    case CYCLE_TIME:
      return Integer.valueOf(getCycleTime());

    case AMPLITUDE:
      return Integer.valueOf(getAmplitude());

    case WAVE_FORM_TYPE:
      return getWaveFormType();

    case WAVE_FORM:
      return getWaveForm();

    case WAIT_FOR_TRIGGER:
      return Integer.valueOf(getWaitForTrigger());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPERATION_TYPE:
      return isSetOperationType();
    case PIN:
      return isSetPin();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case FREQUENCY:
      return isSetFrequency();
    case PHASE:
      return isSetPhase();
    case CYCLE_TIME:
      return isSetCycleTime();
    case AMPLITUDE:
      return isSetAmplitude();
    case WAVE_FORM_TYPE:
      return isSetWaveFormType();
    case WAVE_FORM:
      return isSetWaveForm();
    case WAIT_FOR_TRIGGER:
      return isSetWaitForTrigger();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof emSequenceItem)
      return this.equals((emSequenceItem)that);
    return false;
  }

  public boolean equals(emSequenceItem that) {
    if (that == null)
      return false;

    boolean this_present_operationType = true && this.isSetOperationType();
    boolean that_present_operationType = true && that.isSetOperationType();
    if (this_present_operationType || that_present_operationType) {
      if (!(this_present_operationType && that_present_operationType))
        return false;
      if (!this.operationType.equals(that.operationType))
        return false;
    }

    boolean this_present_pin = true;
    boolean that_present_pin = true;
    if (this_present_pin || that_present_pin) {
      if (!(this_present_pin && that_present_pin))
        return false;
      if (this.pin != that.pin)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_frequency = true;
    boolean that_present_frequency = true;
    if (this_present_frequency || that_present_frequency) {
      if (!(this_present_frequency && that_present_frequency))
        return false;
      if (this.frequency != that.frequency)
        return false;
    }

    boolean this_present_phase = true;
    boolean that_present_phase = true;
    if (this_present_phase || that_present_phase) {
      if (!(this_present_phase && that_present_phase))
        return false;
      if (this.phase != that.phase)
        return false;
    }

    boolean this_present_cycleTime = true;
    boolean that_present_cycleTime = true;
    if (this_present_cycleTime || that_present_cycleTime) {
      if (!(this_present_cycleTime && that_present_cycleTime))
        return false;
      if (this.cycleTime != that.cycleTime)
        return false;
    }

    boolean this_present_amplitude = true;
    boolean that_present_amplitude = true;
    if (this_present_amplitude || that_present_amplitude) {
      if (!(this_present_amplitude && that_present_amplitude))
        return false;
      if (this.amplitude != that.amplitude)
        return false;
    }

    boolean this_present_waveFormType = true && this.isSetWaveFormType();
    boolean that_present_waveFormType = true && that.isSetWaveFormType();
    if (this_present_waveFormType || that_present_waveFormType) {
      if (!(this_present_waveFormType && that_present_waveFormType))
        return false;
      if (!this.waveFormType.equals(that.waveFormType))
        return false;
    }

    boolean this_present_waveForm = true && this.isSetWaveForm();
    boolean that_present_waveForm = true && that.isSetWaveForm();
    if (this_present_waveForm || that_present_waveForm) {
      if (!(this_present_waveForm && that_present_waveForm))
        return false;
      if (!this.waveForm.equals(that.waveForm))
        return false;
    }

    boolean this_present_waitForTrigger = true;
    boolean that_present_waitForTrigger = true;
    if (this_present_waitForTrigger || that_present_waitForTrigger) {
      if (!(this_present_waitForTrigger && that_present_waitForTrigger))
        return false;
      if (this.waitForTrigger != that.waitForTrigger)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(emSequenceItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOperationType()).compareTo(other.isSetOperationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationType, other.operationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPin()).compareTo(other.isSetPin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pin, other.pin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrequency()).compareTo(other.isSetFrequency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrequency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequency, other.frequency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhase()).compareTo(other.isSetPhase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phase, other.phase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCycleTime()).compareTo(other.isSetCycleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCycleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cycleTime, other.cycleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmplitude()).compareTo(other.isSetAmplitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmplitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amplitude, other.amplitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaveFormType()).compareTo(other.isSetWaveFormType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaveFormType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waveFormType, other.waveFormType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaveForm()).compareTo(other.isSetWaveForm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaveForm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waveForm, other.waveForm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaitForTrigger()).compareTo(other.isSetWaitForTrigger());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaitForTrigger()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waitForTrigger, other.waitForTrigger);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("emSequenceItem(");
    boolean first = true;

    sb.append("operationType:");
    if (this.operationType == null) {
      sb.append("null");
    } else {
      sb.append(this.operationType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pin:");
    sb.append(this.pin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frequency:");
    sb.append(this.frequency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phase:");
    sb.append(this.phase);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cycleTime:");
    sb.append(this.cycleTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("amplitude:");
    sb.append(this.amplitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("waveFormType:");
    if (this.waveFormType == null) {
      sb.append("null");
    } else {
      sb.append(this.waveFormType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("waveForm:");
    if (this.waveForm == null) {
      sb.append("null");
    } else {
      sb.append(this.waveForm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("waitForTrigger:");
    sb.append(this.waitForTrigger);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (waveForm != null) {
      waveForm.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class emSequenceItemStandardSchemeFactory implements SchemeFactory {
    public emSequenceItemStandardScheme getScheme() {
      return new emSequenceItemStandardScheme();
    }
  }

  private static class emSequenceItemStandardScheme extends StandardScheme<emSequenceItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, emSequenceItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operationType = emSequenceOperationType.findByValue(iprot.readI32());
              struct.setOperationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pin = iprot.readI32();
              struct.setPinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FREQUENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frequency = iprot.readI32();
              struct.setFrequencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.phase = iprot.readI32();
              struct.setPhaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CYCLE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cycleTime = iprot.readI32();
              struct.setCycleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AMPLITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.amplitude = iprot.readI32();
              struct.setAmplitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WAVE_FORM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.waveFormType = emWaveFormType.findByValue(iprot.readI32());
              struct.setWaveFormTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WAVE_FORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.waveForm = new emWaveForm();
              struct.waveForm.read(iprot);
              struct.setWaveFormIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WAIT_FOR_TRIGGER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.waitForTrigger = iprot.readI32();
              struct.setWaitForTriggerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, emSequenceItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.operationType != null) {
        oprot.writeFieldBegin(OPERATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.operationType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PIN_FIELD_DESC);
      oprot.writeI32(struct.pin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREQUENCY_FIELD_DESC);
      oprot.writeI32(struct.frequency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PHASE_FIELD_DESC);
      oprot.writeI32(struct.phase);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CYCLE_TIME_FIELD_DESC);
      oprot.writeI32(struct.cycleTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AMPLITUDE_FIELD_DESC);
      oprot.writeI32(struct.amplitude);
      oprot.writeFieldEnd();
      if (struct.waveFormType != null) {
        oprot.writeFieldBegin(WAVE_FORM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.waveFormType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.waveForm != null) {
        oprot.writeFieldBegin(WAVE_FORM_FIELD_DESC);
        struct.waveForm.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WAIT_FOR_TRIGGER_FIELD_DESC);
      oprot.writeI32(struct.waitForTrigger);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class emSequenceItemTupleSchemeFactory implements SchemeFactory {
    public emSequenceItemTupleScheme getScheme() {
      return new emSequenceItemTupleScheme();
    }
  }

  private static class emSequenceItemTupleScheme extends TupleScheme<emSequenceItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, emSequenceItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOperationType()) {
        optionals.set(0);
      }
      if (struct.isSetPin()) {
        optionals.set(1);
      }
      if (struct.isSetStartTime()) {
        optionals.set(2);
      }
      if (struct.isSetEndTime()) {
        optionals.set(3);
      }
      if (struct.isSetFrequency()) {
        optionals.set(4);
      }
      if (struct.isSetPhase()) {
        optionals.set(5);
      }
      if (struct.isSetCycleTime()) {
        optionals.set(6);
      }
      if (struct.isSetAmplitude()) {
        optionals.set(7);
      }
      if (struct.isSetWaveFormType()) {
        optionals.set(8);
      }
      if (struct.isSetWaveForm()) {
        optionals.set(9);
      }
      if (struct.isSetWaitForTrigger()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetOperationType()) {
        oprot.writeI32(struct.operationType.getValue());
      }
      if (struct.isSetPin()) {
        oprot.writeI32(struct.pin);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetFrequency()) {
        oprot.writeI32(struct.frequency);
      }
      if (struct.isSetPhase()) {
        oprot.writeI32(struct.phase);
      }
      if (struct.isSetCycleTime()) {
        oprot.writeI32(struct.cycleTime);
      }
      if (struct.isSetAmplitude()) {
        oprot.writeI32(struct.amplitude);
      }
      if (struct.isSetWaveFormType()) {
        oprot.writeI32(struct.waveFormType.getValue());
      }
      if (struct.isSetWaveForm()) {
        struct.waveForm.write(oprot);
      }
      if (struct.isSetWaitForTrigger()) {
        oprot.writeI32(struct.waitForTrigger);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, emSequenceItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.operationType = emSequenceOperationType.findByValue(iprot.readI32());
        struct.setOperationTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pin = iprot.readI32();
        struct.setPinIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.frequency = iprot.readI32();
        struct.setFrequencyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.phase = iprot.readI32();
        struct.setPhaseIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cycleTime = iprot.readI32();
        struct.setCycleTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.amplitude = iprot.readI32();
        struct.setAmplitudeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.waveFormType = emWaveFormType.findByValue(iprot.readI32());
        struct.setWaveFormTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.waveForm = new emWaveForm();
        struct.waveForm.read(iprot);
        struct.setWaveFormIsSet(true);
      }
      if (incoming.get(10)) {
        struct.waitForTrigger = iprot.readI32();
        struct.setWaitForTriggerIsSet(true);
      }
    }
  }

}

