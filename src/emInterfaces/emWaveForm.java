/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package emInterfaces;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Structure for an arbitrary wave form.
 */
public class emWaveForm implements org.apache.thrift.TBase<emWaveForm, emWaveForm._Fields>, java.io.Serializable, Cloneable, Comparable<emWaveForm> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("emWaveForm");

  private static final org.apache.thrift.protocol.TField SAMPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("Samples", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("Rate", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SAMPLE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("SampleCount", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new emWaveFormStandardSchemeFactory());
    schemes.put(TupleScheme.class, new emWaveFormTupleSchemeFactory());
  }

  /**
   * Buffer holding the values
   */
  public List<Integer> Samples; // required
  /**
   * Playback rate
   */
  public int Rate; // required
  /**
   * Length of the buffer
   */
  public int SampleCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Buffer holding the values
     */
    SAMPLES((short)1, "Samples"),
    /**
     * Playback rate
     */
    RATE((short)2, "Rate"),
    /**
     * Length of the buffer
     */
    SAMPLE_COUNT((short)3, "SampleCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SAMPLES
          return SAMPLES;
        case 2: // RATE
          return RATE;
        case 3: // SAMPLE_COUNT
          return SAMPLE_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RATE_ISSET_ID = 0;
  private static final int __SAMPLECOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SAMPLES, new org.apache.thrift.meta_data.FieldMetaData("Samples", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.RATE, new org.apache.thrift.meta_data.FieldMetaData("Rate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SAMPLE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("SampleCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(emWaveForm.class, metaDataMap);
  }

  public emWaveForm() {
  }

  public emWaveForm(
    List<Integer> Samples,
    int Rate,
    int SampleCount)
  {
    this();
    this.Samples = Samples;
    this.Rate = Rate;
    setRateIsSet(true);
    this.SampleCount = SampleCount;
    setSampleCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public emWaveForm(emWaveForm other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSamples()) {
      List<Integer> __this__Samples = new ArrayList<Integer>(other.Samples);
      this.Samples = __this__Samples;
    }
    this.Rate = other.Rate;
    this.SampleCount = other.SampleCount;
  }

  public emWaveForm deepCopy() {
    return new emWaveForm(this);
  }

  @Override
  public void clear() {
    this.Samples = null;
    setRateIsSet(false);
    this.Rate = 0;
    setSampleCountIsSet(false);
    this.SampleCount = 0;
  }

  public int getSamplesSize() {
    return (this.Samples == null) ? 0 : this.Samples.size();
  }

  public java.util.Iterator<Integer> getSamplesIterator() {
    return (this.Samples == null) ? null : this.Samples.iterator();
  }

  public void addToSamples(int elem) {
    if (this.Samples == null) {
      this.Samples = new ArrayList<Integer>();
    }
    this.Samples.add(elem);
  }

  /**
   * Buffer holding the values
   */
  public List<Integer> getSamples() {
    return this.Samples;
  }

  /**
   * Buffer holding the values
   */
  public emWaveForm setSamples(List<Integer> Samples) {
    this.Samples = Samples;
    return this;
  }

  public void unsetSamples() {
    this.Samples = null;
  }

  /** Returns true if field Samples is set (has been assigned a value) and false otherwise */
  public boolean isSetSamples() {
    return this.Samples != null;
  }

  public void setSamplesIsSet(boolean value) {
    if (!value) {
      this.Samples = null;
    }
  }

  /**
   * Playback rate
   */
  public int getRate() {
    return this.Rate;
  }

  /**
   * Playback rate
   */
  public emWaveForm setRate(int Rate) {
    this.Rate = Rate;
    setRateIsSet(true);
    return this;
  }

  public void unsetRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  /** Returns true if field Rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return EncodingUtils.testBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  public void setRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RATE_ISSET_ID, value);
  }

  /**
   * Length of the buffer
   */
  public int getSampleCount() {
    return this.SampleCount;
  }

  /**
   * Length of the buffer
   */
  public emWaveForm setSampleCount(int SampleCount) {
    this.SampleCount = SampleCount;
    setSampleCountIsSet(true);
    return this;
  }

  public void unsetSampleCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SAMPLECOUNT_ISSET_ID);
  }

  /** Returns true if field SampleCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSampleCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SAMPLECOUNT_ISSET_ID);
  }

  public void setSampleCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SAMPLECOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SAMPLES:
      if (value == null) {
        unsetSamples();
      } else {
        setSamples((List<Integer>)value);
      }
      break;

    case RATE:
      if (value == null) {
        unsetRate();
      } else {
        setRate((Integer)value);
      }
      break;

    case SAMPLE_COUNT:
      if (value == null) {
        unsetSampleCount();
      } else {
        setSampleCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SAMPLES:
      return getSamples();

    case RATE:
      return Integer.valueOf(getRate());

    case SAMPLE_COUNT:
      return Integer.valueOf(getSampleCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SAMPLES:
      return isSetSamples();
    case RATE:
      return isSetRate();
    case SAMPLE_COUNT:
      return isSetSampleCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof emWaveForm)
      return this.equals((emWaveForm)that);
    return false;
  }

  public boolean equals(emWaveForm that) {
    if (that == null)
      return false;

    boolean this_present_Samples = true && this.isSetSamples();
    boolean that_present_Samples = true && that.isSetSamples();
    if (this_present_Samples || that_present_Samples) {
      if (!(this_present_Samples && that_present_Samples))
        return false;
      if (!this.Samples.equals(that.Samples))
        return false;
    }

    boolean this_present_Rate = true;
    boolean that_present_Rate = true;
    if (this_present_Rate || that_present_Rate) {
      if (!(this_present_Rate && that_present_Rate))
        return false;
      if (this.Rate != that.Rate)
        return false;
    }

    boolean this_present_SampleCount = true;
    boolean that_present_SampleCount = true;
    if (this_present_SampleCount || that_present_SampleCount) {
      if (!(this_present_SampleCount && that_present_SampleCount))
        return false;
      if (this.SampleCount != that.SampleCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(emWaveForm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSamples()).compareTo(other.isSetSamples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSamples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Samples, other.Samples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRate()).compareTo(other.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Rate, other.Rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSampleCount()).compareTo(other.isSetSampleCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSampleCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SampleCount, other.SampleCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("emWaveForm(");
    boolean first = true;

    sb.append("Samples:");
    if (this.Samples == null) {
      sb.append("null");
    } else {
      sb.append(this.Samples);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Rate:");
    sb.append(this.Rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SampleCount:");
    sb.append(this.SampleCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class emWaveFormStandardSchemeFactory implements SchemeFactory {
    public emWaveFormStandardScheme getScheme() {
      return new emWaveFormStandardScheme();
    }
  }

  private static class emWaveFormStandardScheme extends StandardScheme<emWaveForm> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, emWaveForm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SAMPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.Samples = new ArrayList<Integer>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.readI32();
                  struct.Samples.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setSamplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Rate = iprot.readI32();
              struct.setRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SAMPLE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.SampleCount = iprot.readI32();
              struct.setSampleCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, emWaveForm struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Samples != null) {
        oprot.writeFieldBegin(SAMPLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.Samples.size()));
          for (int _iter3 : struct.Samples)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RATE_FIELD_DESC);
      oprot.writeI32(struct.Rate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SAMPLE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.SampleCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class emWaveFormTupleSchemeFactory implements SchemeFactory {
    public emWaveFormTupleScheme getScheme() {
      return new emWaveFormTupleScheme();
    }
  }

  private static class emWaveFormTupleScheme extends TupleScheme<emWaveForm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, emWaveForm struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSamples()) {
        optionals.set(0);
      }
      if (struct.isSetRate()) {
        optionals.set(1);
      }
      if (struct.isSetSampleCount()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSamples()) {
        {
          oprot.writeI32(struct.Samples.size());
          for (int _iter4 : struct.Samples)
          {
            oprot.writeI32(_iter4);
          }
        }
      }
      if (struct.isSetRate()) {
        oprot.writeI32(struct.Rate);
      }
      if (struct.isSetSampleCount()) {
        oprot.writeI32(struct.SampleCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, emWaveForm struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.Samples = new ArrayList<Integer>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            int _elem7;
            _elem7 = iprot.readI32();
            struct.Samples.add(_elem7);
          }
        }
        struct.setSamplesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Rate = iprot.readI32();
        struct.setRateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.SampleCount = iprot.readI32();
        struct.setSampleCountIsSet(true);
      }
    }
  }

}

